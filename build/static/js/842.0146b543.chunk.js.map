{"version":3,"file":"static/js/842.0146b543.chunk.js","mappings":"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","sources":["../node_modules/@heroicons/react/24/outline/esm/DocumentTextIcon.js","../node_modules/@heroicons/react/24/outline/esm/PencilIcon.js","components/security/EncryptionStatus.tsx","components/security/DataClassificationPanel.tsx","pages/DataEncryption.tsx","../node_modules/@heroicons/react/24/outline/esm/CheckCircleIcon.js","../node_modules/@heroicons/react/24/outline/esm/KeyIcon.js","../node_modules/@heroicons/react/24/outline/esm/ClockIcon.js","../node_modules/@heroicons/react/24/outline/esm/XCircleIcon.js","../node_modules/@heroicons/react/24/outline/esm/PlusIcon.js"],"sourcesContent":["import * as React from \"react\";\nfunction DocumentTextIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(DocumentTextIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction PencilIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(PencilIcon);\nexport default ForwardRef;","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport {\r\n  ShieldCheckIcon,\r\n  LockClosedIcon,\r\n  ExclamationTriangleIcon,\r\n  KeyIcon,\r\n  CheckCircleIcon,\r\n  XCircleIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { useDataEncryption } from '../../contexts/DataEncryptionContext';\r\n\r\ninterface EncryptionStatusProps {\r\n  className?: string;\r\n  showDetails?: boolean;\r\n}\r\n\r\nconst EncryptionStatus: React.FC<EncryptionStatusProps> = ({\r\n  className = '',\r\n  showDetails = false\r\n}) => {\r\n  const {\r\n    isEncrypted,\r\n    encryptionKey,\r\n    settings,\r\n    loading,\r\n    encrypting,\r\n    decrypting\r\n  } = useDataEncryption();\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={`flex items-center space-x-2 text-gray-500 ${className}`}>\r\n        <div className=\"animate-pulse bg-gray-300 rounded-full w-4 h-4\"></div>\r\n        <span className=\"text-sm\">Loading encryption status...</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const getStatusColor = () => {\r\n    if (isEncrypted && encryptionKey) {\r\n      return 'text-green-600 bg-green-100';\r\n    } else if (encrypting || decrypting) {\r\n      return 'text-blue-600 bg-blue-100';\r\n    } else {\r\n      return 'text-red-600 bg-red-100';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = () => {\r\n    if (isEncrypted && encryptionKey) {\r\n      return <ShieldCheckIcon className=\"w-5 h-5\" />;\r\n    } else if (encrypting) {\r\n      return <LockClosedIcon className=\"w-5 h-5 animate-pulse\" />;\r\n    } else if (decrypting) {\r\n      return <LockClosedIcon className=\"w-5 h-5 animate-pulse\" />;\r\n    } else {\r\n      return <ExclamationTriangleIcon className=\"w-5 h-5\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusText = () => {\r\n    if (isEncrypted && encryptionKey) {\r\n      return 'Data Encrypted';\r\n    } else if (encrypting) {\r\n      return 'Encrypting...';\r\n    } else if (decrypting) {\r\n      return 'Decrypting...';\r\n    } else {\r\n      return 'Not Encrypted';\r\n    }\r\n  };\r\n\r\n  const getEncryptionStrength = () => {\r\n    if (!encryptionKey) return 'None';\r\n    \r\n    switch (encryptionKey.algorithm) {\r\n      case 'AES':\r\n        return `AES-${encryptionKey.keySize}`;\r\n      case 'RSA':\r\n        return `RSA-${encryptionKey.keySize}`;\r\n      case 'ChaCha20':\r\n        return 'ChaCha20-256';\r\n      default:\r\n        return 'Unknown';\r\n    }\r\n  };\r\n\r\n  const getKeyStatus = () => {\r\n    if (!encryptionKey) return 'No Key';\r\n    \r\n    const now = new Date();\r\n    const expiresAt = encryptionKey.expiresAt;\r\n    \r\n    if (expiresAt && now > expiresAt) {\r\n      return 'Expired';\r\n    } else if (expiresAt && now > new Date(expiresAt.getTime() - 30 * 24 * 60 * 60 * 1000)) {\r\n      return 'Expires Soon';\r\n    } else {\r\n      return 'Valid';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, scale: 0.9 }}\r\n      animate={{ opacity: 1, scale: 1 }}\r\n      className={`flex flex-col space-y-2 ${className}`}\r\n    >\r\n      <div className={`inline-flex items-center space-x-2 rounded-full px-3 py-1.5 ${getStatusColor()}`}>\r\n        {getStatusIcon()}\r\n        <span className=\"text-sm font-medium\">\r\n          {getStatusText()}\r\n        </span>\r\n      </div>\r\n\r\n      {showDetails && encryptionKey && (\r\n        <motion.div\r\n          initial={{ opacity: 0, height: 0 }}\r\n          animate={{ opacity: 1, height: 'auto' }}\r\n          className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4 space-y-3\"\r\n        >\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                Encryption Details\r\n              </h4>\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Algorithm:</span>\r\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                    {getEncryptionStrength()}\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Key Status:</span>\r\n                  <span className={`text-sm font-medium ${\r\n                    getKeyStatus() === 'Valid' ? 'text-green-600' :\r\n                    getKeyStatus() === 'Expires Soon' ? 'text-yellow-600' :\r\n                    'text-red-600'\r\n                  }`}>\r\n                    {getKeyStatus()}\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Created:</span>\r\n                  <span className=\"text-sm text-gray-900 dark:text-white\">\r\n                    {new Date(encryptionKey.createdAt).toLocaleDateString()}\r\n                  </span>\r\n                </div>\r\n                {encryptionKey.expiresAt && (\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">Expires:</span>\r\n                    <span className=\"text-sm text-gray-900 dark:text-white\">\r\n                      {new Date(encryptionKey.expiresAt).toLocaleDateString()}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                Security Features\r\n              </h4>\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  {settings.enableAtRestEncryption ? (\r\n                    <CheckCircleIcon className=\"w-4 h-4 text-green-500\" />\r\n                  ) : (\r\n                    <XCircleIcon className=\"w-4 h-4 text-red-500\" />\r\n                  )}\r\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                    At-Rest Encryption\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  {settings.enableInTransitEncryption ? (\r\n                    <CheckCircleIcon className=\"w-4 h-4 text-green-500\" />\r\n                  ) : (\r\n                    <XCircleIcon className=\"w-4 h-4 text-red-500\" />\r\n                  )}\r\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                    In-Transit Encryption\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  {settings.enableEndToEndEncryption ? (\r\n                    <CheckCircleIcon className=\"w-4 h-4 text-green-500\" />\r\n                  ) : (\r\n                    <XCircleIcon className=\"w-4 h-4 text-red-500\" />\r\n                  )}\r\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                    End-to-End Encryption\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  {settings.secureStorage ? (\r\n                    <CheckCircleIcon className=\"w-4 h-4 text-green-500\" />\r\n                  ) : (\r\n                    <XCircleIcon className=\"w-4 h-4 text-red-500\" />\r\n                  )}\r\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                    Secure Storage\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {settings.masterPasswordRequired && (\r\n            <div className=\"pt-3 border-t border-gray-200 dark:border-gray-700\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <KeyIcon className=\"w-4 h-4 text-blue-500\" />\r\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  Master password protection enabled\r\n                </span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </motion.div>\r\n      )}\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default EncryptionStatus;\r\n","import React, { useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport {\r\n  ShieldCheckIcon,\r\n  ExclamationTriangleIcon,\r\n  LockClosedIcon,\r\n  EyeIcon,\r\n  EyeSlashIcon,\r\n  PlusIcon,\r\n  PencilIcon,\r\n  TrashIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { DataClassification } from '../../types/DataEncryption';\r\nimport { useDataEncryption } from '../../contexts/DataEncryptionContext';\r\n\r\ninterface DataClassificationPanelProps {\r\n  classifications: DataClassification[];\r\n  onUpdateClassification: (classification: DataClassification) => void;\r\n  className?: string;\r\n}\r\n\r\nconst DataClassificationPanel: React.FC<DataClassificationPanelProps> = ({\r\n  classifications,\r\n  onUpdateClassification,\r\n  className = ''\r\n}) => {\r\n  const [selectedClassification, setSelectedClassification] = useState<DataClassification | null>(null);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  const getLevelColor = (level: string) => {\r\n    switch (level) {\r\n      case 'public':\r\n        return 'text-green-600 bg-green-100 border-green-200';\r\n      case 'internal':\r\n        return 'text-blue-600 bg-blue-100 border-blue-200';\r\n      case 'confidential':\r\n        return 'text-orange-600 bg-orange-100 border-orange-200';\r\n      case 'restricted':\r\n        return 'text-red-600 bg-red-100 border-red-200';\r\n      default:\r\n        return 'text-gray-600 bg-gray-100 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const getLevelIcon = (level: string) => {\r\n    switch (level) {\r\n      case 'public':\r\n        return <EyeIcon className=\"w-5 h-5\" />;\r\n      case 'internal':\r\n        return <EyeSlashIcon className=\"w-5 h-5\" />;\r\n      case 'confidential':\r\n        return <LockClosedIcon className=\"w-5 h-5\" />;\r\n      case 'restricted':\r\n        return <ShieldCheckIcon className=\"w-5 h-5\" />;\r\n      default:\r\n        return <ExclamationTriangleIcon className=\"w-5 h-5\" />;\r\n    }\r\n  };\r\n\r\n  const handleEdit = (classification: DataClassification) => {\r\n    setSelectedClassification(classification);\r\n    setIsEditing(true);\r\n    setShowForm(true);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (selectedClassification) {\r\n      onUpdateClassification(selectedClassification);\r\n      setSelectedClassification(null);\r\n      setIsEditing(false);\r\n      setShowForm(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setSelectedClassification(null);\r\n    setIsEditing(false);\r\n    setShowForm(false);\r\n  };\r\n\r\n  const handleAddNew = () => {\r\n    setSelectedClassification({\r\n      level: 'internal',\r\n      categories: [],\r\n      retentionPeriod: 90,\r\n      encryptionRequired: true,\r\n      accessControls: {\r\n        roles: ['user'],\r\n        permissions: ['read']\r\n      }\r\n    });\r\n    setIsEditing(false);\r\n    setShowForm(true);\r\n  };\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg shadow-lg ${className}`}>\r\n      <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n            Data Classifications\r\n          </h3>\r\n          <button\r\n            onClick={handleAddNew}\r\n            className=\"inline-flex items-center space-x-2 px-3 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700\"\r\n          >\r\n            <PlusIcon className=\"w-4 h-4\" />\r\n            <span>Add Classification</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"p-6\">\r\n        <div className=\"space-y-4\">\r\n          {classifications.map((classification, index) => (\r\n            <motion.div\r\n              key={classification.level}\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: index * 0.1 }}\r\n              className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow\"\r\n            >\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex items-start space-x-3\">\r\n                  <div className={`p-2 rounded-lg ${getLevelColor(classification.level)}`}>\r\n                    {getLevelIcon(classification.level)}\r\n                  </div>\r\n                  \r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center space-x-2 mb-2\">\r\n                      <h4 className=\"text-md font-medium text-gray-900 dark:text-white capitalize\">\r\n                        {classification.level}\r\n                      </h4>\r\n                      <span className={`text-xs px-2 py-1 rounded-full ${getLevelColor(classification.level)}`}>\r\n                        {classification.encryptionRequired ? 'Encrypted' : 'Unencrypted'}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\r\n                      <div>\r\n                        <p className=\"text-gray-600 dark:text-gray-400 mb-1\">\r\n                          <strong>Categories:</strong> {classification.categories.join(', ')}\r\n                        </p>\r\n                        <p className=\"text-gray-600 dark:text-gray-400\">\r\n                          <strong>Retention:</strong> {classification.retentionPeriod} days\r\n                        </p>\r\n                      </div>\r\n                      <div>\r\n                        <p className=\"text-gray-600 dark:text-gray-400 mb-1\">\r\n                          <strong>Roles:</strong> {classification.accessControls.roles.join(', ')}\r\n                        </p>\r\n                        <p className=\"text-gray-600 dark:text-gray-400\">\r\n                          <strong>Permissions:</strong> {classification.accessControls.permissions.join(', ')}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <button\r\n                  onClick={() => handleEdit(classification)}\r\n                  className=\"p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n                >\r\n                  <PencilIcon className=\"w-4 h-4\" />\r\n                </button>\r\n              </div>\r\n            </motion.div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Edit/Add Form Modal */}\r\n      {showForm && selectedClassification && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n          <motion.div\r\n            initial={{ opacity: 0, scale: 0.9 }}\r\n            animate={{ opacity: 1, scale: 1 }}\r\n            className=\"bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto\"\r\n          >\r\n            <div className=\"flex items-center justify-between mb-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                {isEditing ? 'Edit Classification' : 'Add New Classification'}\r\n              </h3>\r\n              <button\r\n                onClick={handleCancel}\r\n                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n              >\r\n                <TrashIcon className=\"w-6 h-6\" />\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Classification Level\r\n                </label>\r\n                <select\r\n                  value={selectedClassification.level}\r\n                  onChange={(e) => setSelectedClassification(prev => \r\n                    prev ? { ...prev, level: e.target.value as any } : null\r\n                  )}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white\"\r\n                >\r\n                  <option value=\"public\">Public</option>\r\n                  <option value=\"internal\">Internal</option>\r\n                  <option value=\"confidential\">Confidential</option>\r\n                  <option value=\"restricted\">Restricted</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Categories (comma-separated)\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={selectedClassification.categories.join(', ')}\r\n                  onChange={(e) => setSelectedClassification(prev => \r\n                    prev ? { \r\n                      ...prev, \r\n                      categories: e.target.value.split(',').map(c => c.trim()).filter(c => c)\r\n                    } : null\r\n                  )}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white\"\r\n                  placeholder=\"e.g., personal, financial, business\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    Retention Period (days)\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={selectedClassification.retentionPeriod}\r\n                    onChange={(e) => setSelectedClassification(prev => \r\n                      prev ? { ...prev, retentionPeriod: Number(e.target.value) } : null\r\n                    )}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"flex items-center space-x-2 mt-6\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id=\"encryptionRequired\"\r\n                    checked={selectedClassification.encryptionRequired}\r\n                    onChange={(e) => setSelectedClassification(prev => \r\n                      prev ? { ...prev, encryptionRequired: e.target.checked } : null\r\n                    )}\r\n                    className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n                  />\r\n                  <label htmlFor=\"encryptionRequired\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                    Encryption Required\r\n                  </label>\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Access Roles (comma-separated)\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={selectedClassification.accessControls.roles.join(', ')}\r\n                  onChange={(e) => setSelectedClassification(prev => \r\n                    prev ? { \r\n                      ...prev, \r\n                      accessControls: {\r\n                        ...prev.accessControls,\r\n                        roles: e.target.value.split(',').map(r => r.trim()).filter(r => r)\r\n                      }\r\n                    } : null\r\n                  )}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white\"\r\n                  placeholder=\"e.g., user, admin, manager\"\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Permissions (comma-separated)\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={selectedClassification.accessControls.permissions.join(', ')}\r\n                  onChange={(e) => setSelectedClassification(prev => \r\n                    prev ? { \r\n                      ...prev, \r\n                      accessControls: {\r\n                        ...prev.accessControls,\r\n                        permissions: e.target.value.split(',').map(p => p.trim()).filter(p => p)\r\n                      }\r\n                    } : null\r\n                  )}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white\"\r\n                  placeholder=\"e.g., read, write, delete\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-end space-x-3 mt-6\">\r\n              <button\r\n                onClick={handleCancel}\r\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                onClick={handleSave}\r\n                className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700\"\r\n              >\r\n                {isEditing ? 'Update' : 'Add'} Classification\r\n              </button>\r\n            </div>\r\n          </motion.div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataClassificationPanel;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport {\r\n  KeyIcon,\r\n  LockClosedIcon,\r\n  ChartBarIcon,\r\n  CogIcon,\r\n  DocumentTextIcon,\r\n  ClockIcon,\r\n  CheckCircleIcon,\r\n  XCircleIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { useDataEncryption } from '../contexts/DataEncryptionContext';\r\nimport EncryptionStatus from '../components/security/EncryptionStatus';\r\nimport DataClassificationPanel from '../components/security/DataClassificationPanel';\r\n\r\nconst DataEncryption: React.FC = () => {\r\n  const {\r\n    isEncrypted,\r\n    encryptionKey,\r\n    settings,\r\n    dataClassifications,\r\n    loading,\r\n    encrypting,\r\n    encryptData,\r\n    generateKeyPair,\r\n    rotateKeys,\r\n    revokeKey,\r\n    updateEncryptionSettings,\r\n    updateDataClassification,\r\n    refreshAuditLogs\r\n  } = useDataEncryption();\r\n\r\n  const [activeTab, setActiveTab] = useState<'overview' | 'settings' | 'classifications' | 'keys' | 'audit'>('overview');\r\n  const [testData, setTestData] = useState({\r\n    message: 'This is a test message to encrypt',\r\n    classification: 'confidential'\r\n  });\r\n  const [encryptedTestData, setEncryptedTestData] = useState<string | null>(null);\r\n  const [isGeneratingKey, setIsGeneratingKey] = useState(false);\r\n\r\n  useEffect(() => {\r\n    refreshAuditLogs();\r\n  }, [refreshAuditLogs]);\r\n\r\n  const tabs = [\r\n    { id: 'overview', name: 'Overview', icon: ChartBarIcon },\r\n    { id: 'settings', name: 'Settings', icon: CogIcon },\r\n    { id: 'classifications', name: 'Classifications', icon: DocumentTextIcon },\r\n    { id: 'keys', name: 'Keys', icon: KeyIcon },\r\n    { id: 'audit', name: 'Audit Log', icon: ClockIcon }\r\n  ];\r\n\r\n  const handleGenerateKey = async () => {\r\n    setIsGeneratingKey(true);\r\n    try {\r\n      await generateKeyPair();\r\n    } catch (error) {\r\n      console.error('Failed to generate key:', error);\r\n    } finally {\r\n      setIsGeneratingKey(false);\r\n    }\r\n  };\r\n\r\n  const handleRotateKeys = async () => {\r\n    try {\r\n      await rotateKeys();\r\n    } catch (error) {\r\n      console.error('Failed to rotate keys:', error);\r\n    }\r\n  };\r\n\r\n  const handleRevokeKey = async () => {\r\n    if (encryptionKey) {\r\n      try {\r\n        await revokeKey(encryptionKey.id);\r\n      } catch (error) {\r\n        console.error('Failed to revoke key:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTestEncryption = async () => {\r\n    if (!isEncrypted || !encryptionKey) return;\r\n\r\n    try {\r\n      const classification = dataClassifications.find(c => c.level === testData.classification);\r\n      if (!classification) return;\r\n\r\n      const encrypted = await encryptData(testData.message, classification);\r\n      setEncryptedTestData(encrypted.data);\r\n    } catch (error) {\r\n      console.error('Encryption test failed:', error);\r\n    }\r\n  };\r\n\r\n  const getStats = () => {\r\n    const totalClassifications = dataClassifications.length;\r\n    const encryptedClassifications = dataClassifications.filter(c => c.encryptionRequired).length;\r\n    const keyStatus = encryptionKey ? (encryptionKey.isActive ? 'Active' : 'Inactive') : 'None';\r\n    const encryptionEnabled = settings.enableAtRestEncryption && settings.enableInTransitEncryption;\r\n\r\n    return {\r\n      totalClassifications,\r\n      encryptedClassifications,\r\n      keyStatus,\r\n      encryptionEnabled\r\n    };\r\n  };\r\n\r\n  const stats = getStats();\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 py-8\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-8 bg-gray-300 dark:bg-gray-600 rounded w-1/3 mb-8\"></div>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n              {[...Array(4)].map((_, i) => (\r\n                <div key={i} className=\"bg-white dark:bg-gray-800 rounded-lg p-6\">\r\n                  <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-1/2 mb-2\"></div>\r\n                  <div className=\"h-8 bg-gray-300 dark:bg-gray-600 rounded w-1/3\"></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 py-8\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        {/* Header */}\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\r\n            Data Encryption & Protection\r\n          </h1>\r\n          <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\r\n            Manage data encryption, security settings, and data protection policies\r\n          </p>\r\n        </div>\r\n\r\n        {/* Tabs */}\r\n        <div className=\"mb-8\">\r\n          <nav className=\"flex space-x-8\">\r\n            {tabs.map((tab) => {\r\n              const Icon = tab.icon;\r\n              return (\r\n                <button\r\n                  key={tab.id}\r\n                  onClick={() => setActiveTab(tab.id as any)}\r\n                  className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\r\n                    activeTab === tab.id\r\n                      ? 'border-blue-500 text-blue-600'\r\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n                  }`}\r\n                >\r\n                  <Icon className=\"w-5 h-5\" />\r\n                  <span>{tab.name}</span>\r\n                </button>\r\n              );\r\n            })}\r\n          </nav>\r\n        </div>\r\n\r\n        {/* Tab Content */}\r\n        <motion.div\r\n          key={activeTab}\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.2 }}\r\n        >\r\n          {activeTab === 'overview' && (\r\n            <div className=\"space-y-8\">\r\n              {/* Stats Cards */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n                <motion.div\r\n                  initial={{ opacity: 0, y: 20 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm\"\r\n                >\r\n                  <div className=\"flex items-center\">\r\n                    <div className=\"p-2 bg-blue-100 dark:bg-blue-900 rounded-lg\">\r\n                      <DocumentTextIcon className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\r\n                    </div>\r\n                    <div className=\"ml-4\">\r\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\r\n                        Data Classifications\r\n                      </p>\r\n                      <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                        {stats.totalClassifications}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </motion.div>\r\n\r\n                <motion.div\r\n                  initial={{ opacity: 0, y: 20 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  transition={{ delay: 0.1 }}\r\n                  className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm\"\r\n                >\r\n                  <div className=\"flex items-center\">\r\n                    <div className=\"p-2 bg-green-100 dark:bg-green-900 rounded-lg\">\r\n                      <LockClosedIcon className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\r\n                    </div>\r\n                    <div className=\"ml-4\">\r\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\r\n                        Encrypted Types\r\n                      </p>\r\n                      <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                        {stats.encryptedClassifications}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </motion.div>\r\n\r\n                <motion.div\r\n                  initial={{ opacity: 0, y: 20 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  transition={{ delay: 0.2 }}\r\n                  className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm\"\r\n                >\r\n                  <div className=\"flex items-center\">\r\n                    <div className=\"p-2 bg-orange-100 dark:bg-orange-900 rounded-lg\">\r\n                      <KeyIcon className=\"w-6 h-6 text-orange-600 dark:text-orange-400\" />\r\n                    </div>\r\n                    <div className=\"ml-4\">\r\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\r\n                        Key Status\r\n                      </p>\r\n                      <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                        {stats.keyStatus}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </motion.div>\r\n\r\n                <motion.div\r\n                  initial={{ opacity: 0, y: 20 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  transition={{ delay: 0.3 }}\r\n                  className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm\"\r\n                >\r\n                  <div className=\"flex items-center\">\r\n                    <div className={`p-2 rounded-lg ${\r\n                      stats.encryptionEnabled \r\n                        ? 'bg-green-100 dark:bg-green-900' \r\n                        : 'bg-red-100 dark:bg-red-900'\r\n                    }`}>\r\n                      {stats.encryptionEnabled ? (\r\n                        <CheckCircleIcon className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\r\n                      ) : (\r\n                        <XCircleIcon className=\"w-6 h-6 text-red-600 dark:text-red-400\" />\r\n                      )}\r\n                    </div>\r\n                    <div className=\"ml-4\">\r\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\r\n                        Encryption\r\n                      </p>\r\n                      <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                        {stats.encryptionEnabled ? 'Enabled' : 'Disabled'}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </motion.div>\r\n              </div>\r\n\r\n              {/* Encryption Status */}\r\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                  Encryption Status\r\n                </h3>\r\n                <EncryptionStatus showDetails={true} />\r\n              </div>\r\n\r\n              {/* Test Encryption */}\r\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                  Test Encryption\r\n                </h3>\r\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n                  <div>\r\n                    <h4 className=\"text-md font-medium text-gray-700 dark:text-gray-300 mb-3\">\r\n                      Test Data\r\n                    </h4>\r\n                    <div className=\"space-y-3\">\r\n                      <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                          Message\r\n                        </label>\r\n                        <textarea\r\n                          value={testData.message}\r\n                          onChange={(e) => setTestData(prev => ({\r\n                            ...prev,\r\n                            message: e.target.value\r\n                          }))}\r\n                          className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white\"\r\n                          rows={3}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                          Classification\r\n                        </label>\r\n                        <select\r\n                          value={testData.classification}\r\n                          onChange={(e) => setTestData(prev => ({\r\n                            ...prev,\r\n                            classification: e.target.value\r\n                          }))}\r\n                          className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white\"\r\n                        >\r\n                          {dataClassifications.map(classification => (\r\n                            <option key={classification.level} value={classification.level}>\r\n                              {classification.level} {classification.encryptionRequired ? '(Encrypted)' : ''}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                      </div>\r\n                      <button\r\n                        onClick={handleTestEncryption}\r\n                        disabled={!isEncrypted || encrypting}\r\n                        className=\"w-full px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50\"\r\n                      >\r\n                        {encrypting ? 'Encrypting...' : 'Test Encryption'}\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <h4 className=\"text-md font-medium text-gray-700 dark:text-gray-300 mb-3\">\r\n                      Encrypted Result\r\n                    </h4>\r\n                    <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\r\n                      {encryptedTestData ? (\r\n                        <div>\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\r\n                            Encrypted data (Base64):\r\n                          </p>\r\n                          <code className=\"text-xs text-gray-800 dark:text-gray-200 break-all\">\r\n                            {encryptedTestData}\r\n                          </code>\r\n                        </div>\r\n                      ) : (\r\n                        <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                          No encrypted data yet. Click \"Test Encryption\" to encrypt the message.\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === 'settings' && (\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-6\">\r\n                Encryption Settings\r\n              </h3>\r\n              <div className=\"space-y-6\">\r\n                {/* Algorithm Settings */}\r\n                <div>\r\n                  <h4 className=\"text-md font-medium text-gray-700 dark:text-gray-300 mb-3\">\r\n                    Encryption Algorithm\r\n                  </h4>\r\n                  <select\r\n                    value={settings.defaultAlgorithm}\r\n                    onChange={(e) => updateEncryptionSettings({ \r\n                      defaultAlgorithm: e.target.value as any \r\n                    })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white\"\r\n                  >\r\n                    <option value=\"AES-256-GCM\">AES-256-GCM</option>\r\n                    <option value=\"ChaCha20-Poly1305\">ChaCha20-Poly1305</option>\r\n                    <option value=\"RSA-OAEP\">RSA-OAEP</option>\r\n                  </select>\r\n                </div>\r\n\r\n                {/* Security Features */}\r\n                <div>\r\n                  <h4 className=\"text-md font-medium text-gray-700 dark:text-gray-300 mb-3\">\r\n                    Security Features\r\n                  </h4>\r\n                  <div className=\"space-y-4\">\r\n                    {Object.entries({\r\n                      enableAtRestEncryption: 'At-Rest Encryption',\r\n                      enableInTransitEncryption: 'In-Transit Encryption',\r\n                      enableEndToEndEncryption: 'End-to-End Encryption',\r\n                      masterPasswordRequired: 'Master Password Required',\r\n                      biometricUnlock: 'Biometric Unlock',\r\n                      secureStorage: 'Secure Storage'\r\n                    }).map(([key, label]) => (\r\n                      <div key={key} className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                            {label}\r\n                          </label>\r\n                          <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                            {key === 'enableAtRestEncryption' && 'Encrypt data when stored'}\r\n                            {key === 'enableInTransitEncryption' && 'Encrypt data during transmission'}\r\n                            {key === 'enableEndToEndEncryption' && 'Encrypt data end-to-end'}\r\n                            {key === 'masterPasswordRequired' && 'Require master password for access'}\r\n                            {key === 'biometricUnlock' && 'Allow biometric authentication'}\r\n                            {key === 'secureStorage' && 'Use secure storage mechanisms'}\r\n                          </p>\r\n                        </div>\r\n                        <button\r\n                          onClick={() => updateEncryptionSettings({ \r\n                            [key]: !settings[key as keyof typeof settings] \r\n                          })}\r\n                          className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                            settings[key as keyof typeof settings] ? 'bg-blue-600' : 'bg-gray-200'\r\n                          }`}\r\n                        >\r\n                          <span\r\n                            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                              settings[key as keyof typeof settings] ? 'translate-x-6' : 'translate-x-1'\r\n                            }`}\r\n                          />\r\n                        </button>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Key Management */}\r\n                <div>\r\n                  <h4 className=\"text-md font-medium text-gray-700 dark:text-gray-300 mb-3\">\r\n                    Key Management\r\n                  </h4>\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                        Key Rotation Interval (days)\r\n                      </label>\r\n                      <input\r\n                        type=\"number\"\r\n                        value={settings.keyRotationInterval}\r\n                        onChange={(e) => updateEncryptionSettings({ \r\n                          keyRotationInterval: Number(e.target.value) \r\n                        })}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                        Auto Lock Timeout (minutes)\r\n                      </label>\r\n                      <input\r\n                        type=\"number\"\r\n                        value={settings.autoLockTimeout}\r\n                        onChange={(e) => updateEncryptionSettings({ \r\n                          autoLockTimeout: Number(e.target.value) \r\n                        })}\r\n                        className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === 'classifications' && (\r\n            <DataClassificationPanel\r\n              classifications={dataClassifications}\r\n              onUpdateClassification={updateDataClassification}\r\n            />\r\n          )}\r\n\r\n          {activeTab === 'keys' && (\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm\">\r\n              <div className=\"flex items-center justify-between mb-6\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                  Encryption Keys\r\n                </h3>\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <button\r\n                    onClick={handleGenerateKey}\r\n                    disabled={isGeneratingKey || isEncrypted}\r\n                    className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50\"\r\n                  >\r\n                    {isGeneratingKey ? 'Generating...' : 'Generate New Key'}\r\n                  </button>\r\n                  {isEncrypted && (\r\n                    <>\r\n                      <button\r\n                        onClick={handleRotateKeys}\r\n                        className=\"px-4 py-2 text-sm font-medium text-orange-600 bg-orange-100 rounded-md hover:bg-orange-200\"\r\n                      >\r\n                        Rotate Keys\r\n                      </button>\r\n                      <button\r\n                        onClick={handleRevokeKey}\r\n                        className=\"px-4 py-2 text-sm font-medium text-red-600 bg-red-100 rounded-md hover:bg-red-200\"\r\n                      >\r\n                        Revoke Key\r\n                      </button>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {encryptionKey ? (\r\n                <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\r\n                  <div className=\"flex items-start space-x-3\">\r\n                    <div className=\"p-2 bg-green-100 dark:bg-green-900 rounded-lg\">\r\n                      <KeyIcon className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                      <h4 className=\"text-md font-medium text-gray-900 dark:text-white\">\r\n                        Active Encryption Key\r\n                      </h4>\r\n                      <div className=\"mt-2 space-y-1 text-sm text-gray-600 dark:text-gray-400\">\r\n                        <p><strong>Algorithm:</strong> {encryptionKey.algorithm}</p>\r\n                        <p><strong>Key Size:</strong> {encryptionKey.keySize} bits</p>\r\n                        <p><strong>Created:</strong> {new Date(encryptionKey.createdAt).toLocaleString()}</p>\r\n                        {encryptionKey.expiresAt && (\r\n                          <p><strong>Expires:</strong> {new Date(encryptionKey.expiresAt).toLocaleString()}</p>\r\n                        )}\r\n                        <p><strong>Status:</strong> {encryptionKey.isActive ? 'Active' : 'Inactive'}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"text-center py-8\">\r\n                  <KeyIcon className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-2\">\r\n                    No Encryption Key\r\n                  </h4>\r\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\r\n                    Generate an encryption key to start protecting your data\r\n                  </p>\r\n                  <button\r\n                    onClick={handleGenerateKey}\r\n                    disabled={isGeneratingKey}\r\n                    className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50\"\r\n                  >\r\n                    {isGeneratingKey ? 'Generating...' : 'Generate Key'}\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === 'audit' && (\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                Encryption Audit Log\r\n              </h3>\r\n              <div className=\"text-center py-8\">\r\n                <ClockIcon className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n                <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-2\">\r\n                  Audit Log Coming Soon\r\n                </h4>\r\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  Track encryption operations and security events\r\n                </p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </motion.div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataEncryption;\r\n","import * as React from \"react\";\nfunction CheckCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(CheckCircleIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction KeyIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M15.75 5.25a3 3 0 0 1 3 3m3 0a6 6 0 0 1-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1 1 21.75 8.25Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(KeyIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ClockIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ClockIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction XCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m9.75 9.75 4.5 4.5m0-4.5-4.5 4.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(XCircleIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction PlusIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 4.5v15m7.5-7.5h-15\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(PlusIcon);\nexport default ForwardRef;"],"names":["DocumentTextIcon","_ref","svgRef","title","titleId","props","_objectWithoutProperties","_excluded","React","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","PencilIcon","className","showDetails","isEncrypted","encryptionKey","settings","loading","encrypting","decrypting","useDataEncryption","_jsxs","concat","children","_jsx","getKeyStatus","now","Date","expiresAt","getTime","motion","div","initial","opacity","scale","animate","ShieldCheckIcon","LockClosedIcon","ExclamationTriangleIcon","height","getEncryptionStrength","algorithm","keySize","createdAt","toLocaleDateString","enableAtRestEncryption","CheckCircleIcon","XCircleIcon","enableInTransitEncryption","enableEndToEndEncryption","secureStorage","masterPasswordRequired","KeyIcon","classifications","onUpdateClassification","selectedClassification","setSelectedClassification","useState","isEditing","setIsEditing","showForm","setShowForm","getLevelColor","level","getLevelIcon","EyeIcon","EyeSlashIcon","handleCancel","onClick","handleAddNew","categories","retentionPeriod","encryptionRequired","accessControls","roles","permissions","PlusIcon","map","classification","index","y","transition","delay","join","handleEdit","TrashIcon","value","onChange","e","prev","_objectSpread","target","type","split","c","trim","filter","placeholder","Number","checked","htmlFor","r","p","handleSave","DataEncryption","dataClassifications","encryptData","generateKeyPair","rotateKeys","revokeKey","updateEncryptionSettings","updateDataClassification","refreshAuditLogs","activeTab","setActiveTab","testData","setTestData","message","encryptedTestData","setEncryptedTestData","isGeneratingKey","setIsGeneratingKey","useEffect","tabs","name","icon","ChartBarIcon","CogIcon","ClockIcon","handleGenerateKey","async","error","console","stats","totalClassifications","length","encryptedClassifications","keyStatus","isActive","encryptionEnabled","Array","_","i","tab","Icon","duration","EncryptionStatus","rows","find","encrypted","data","disabled","defaultAlgorithm","entries","biometricUnlock","key","label","keyRotationInterval","autoLockTimeout","DataClassificationPanel","_Fragment","toLocaleString"],"sourceRoot":""}