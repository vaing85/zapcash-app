{"version":3,"file":"static/js/431.5d77176b.chunk.js","mappings":"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","sources":["../node_modules/@heroicons/react/24/outline/esm/FingerPrintIcon.js","../node_modules/@heroicons/react/24/outline/esm/FaceSmileIcon.js","../node_modules/@heroicons/react/24/outline/esm/MicrophoneIcon.js","services/biometricAuthService.ts","services/enhancedFraudDetectionService.ts","components/EnhancedSecurityDashboard.tsx","pages/EnhancedSecurity.tsx"],"sourcesContent":["import * as React from \"react\";\nfunction FingerPrintIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M7.864 4.243A7.5 7.5 0 0 1 19.5 10.5c0 2.92-.556 5.709-1.568 8.268M5.742 6.364A7.465 7.465 0 0 0 4.5 10.5a7.464 7.464 0 0 1-1.15 3.993m1.989 3.559A11.209 11.209 0 0 0 8.25 10.5a3.75 3.75 0 1 1 7.5 0c0 .527-.021 1.049-.064 1.565M12 10.5a14.94 14.94 0 0 1-3.6 9.75m6.633-4.596a18.666 18.666 0 0 1-2.485 5.33\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(FingerPrintIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction FaceSmileIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M15.182 15.182a4.5 4.5 0 0 1-6.364 0M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM9.75 9.75c0 .414-.168.75-.375.75S9 10.164 9 9.75 9.168 9 9.375 9s.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Zm5.625 0c0 .414-.168.75-.375.75s-.375-.336-.375-.75.168-.75.375-.75.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(FaceSmileIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction MicrophoneIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 18.75a6 6 0 0 0 6-6v-1.5m-6 7.5a6 6 0 0 1-6-6v-1.5m6 7.5v3.75m-3.75 0h7.5M12 15.75a3 3 0 0 1-3-3V4.5a3 3 0 1 1 6 0v8.25a3 3 0 0 1-3 3Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(MicrophoneIcon);\nexport default ForwardRef;","// Enhanced Biometric Authentication Service\r\n// Provides comprehensive biometric authentication including fingerprint, face, and voice recognition\r\n\r\nexport interface BiometricCapability {\r\n  type: 'fingerprint' | 'face' | 'voice' | 'iris' | 'palm';\r\n  available: boolean;\r\n  enrolled: boolean;\r\n  confidence: number; // 0-1\r\n  lastUsed?: Date;\r\n  errorRate: number; // 0-1\r\n}\r\n\r\nexport interface BiometricEnrollment {\r\n  id: string;\r\n  userId: string;\r\n  type: 'fingerprint' | 'face' | 'voice' | 'iris' | 'palm';\r\n  template: string; // Encrypted biometric template\r\n  quality: number; // 0-1\r\n  enrolledAt: Date;\r\n  lastUsed?: Date;\r\n  isActive: boolean;\r\n  metadata: {\r\n    deviceId: string;\r\n    os: string;\r\n    browser?: string;\r\n    location?: string;\r\n  };\r\n}\r\n\r\nexport interface BiometricChallenge {\r\n  id: string;\r\n  userId: string;\r\n  type: 'fingerprint' | 'face' | 'voice' | 'iris' | 'palm';\r\n  challenge: string;\r\n  expiresAt: Date;\r\n  attempts: number;\r\n  maxAttempts: number;\r\n  status: 'pending' | 'completed' | 'failed' | 'expired';\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface BiometricSettings {\r\n  userId: string;\r\n  enabled: boolean;\r\n  fallbackToPassword: boolean;\r\n  requireBiometricForPayments: boolean;\r\n  requireBiometricForSensitiveActions: boolean;\r\n  allowedTypes: ('fingerprint' | 'face' | 'voice' | 'iris' | 'palm')[];\r\n  qualityThreshold: number; // 0-1\r\n  maxRetries: number;\r\n  sessionTimeout: number; // minutes\r\n  autoLock: boolean;\r\n  autoLockTimeout: number; // minutes\r\n}\r\n\r\nexport interface BiometricAnalytics {\r\n  totalAttempts: number;\r\n  successfulAttempts: number;\r\n  failedAttempts: number;\r\n  successRate: number;\r\n  averageResponseTime: number; // milliseconds\r\n  typeBreakdown: {\r\n    fingerprint: { attempts: number; successRate: number };\r\n    face: { attempts: number; successRate: number };\r\n    voice: { attempts: number; successRate: number };\r\n    iris: { attempts: number; successRate: number };\r\n    palm: { attempts: number; successRate: number };\r\n  };\r\n  deviceBreakdown: Array<{\r\n    deviceId: string;\r\n    attempts: number;\r\n    successRate: number;\r\n  }>;\r\n  timeBreakdown: Array<{\r\n    hour: number;\r\n    attempts: number;\r\n    successRate: number;\r\n  }>;\r\n}\r\n\r\nclass BiometricAuthService {\r\n  private capabilities: BiometricCapability[] = [];\r\n  private enrollments: BiometricEnrollment[] = [];\r\n  private challenges: BiometricChallenge[] = [];\r\n  private settings: BiometricSettings | null = null;\r\n  private analytics: BiometricAnalytics = {\r\n    totalAttempts: 0,\r\n    successfulAttempts: 0,\r\n    failedAttempts: 0,\r\n    successRate: 0,\r\n    averageResponseTime: 0,\r\n    typeBreakdown: {\r\n      fingerprint: { attempts: 0, successRate: 0 },\r\n      face: { attempts: 0, successRate: 0 },\r\n      voice: { attempts: 0, successRate: 0 },\r\n      iris: { attempts: 0, successRate: 0 },\r\n      palm: { attempts: 0, successRate: 0 }\r\n    },\r\n    deviceBreakdown: [],\r\n    timeBreakdown: []\r\n  };\r\n\r\n  constructor() {\r\n    this.initializeCapabilities();\r\n  }\r\n\r\n  private initializeCapabilities(): void {\r\n    // Check browser/device capabilities\r\n    this.capabilities = [\r\n      {\r\n        type: 'fingerprint',\r\n        available: this.isFingerprintAvailable(),\r\n        enrolled: false,\r\n        confidence: 0,\r\n        errorRate: 0.01\r\n      },\r\n      {\r\n        type: 'face',\r\n        available: this.isFaceRecognitionAvailable(),\r\n        enrolled: false,\r\n        confidence: 0,\r\n        errorRate: 0.02\r\n      },\r\n      {\r\n        type: 'voice',\r\n        available: this.isVoiceRecognitionAvailable(),\r\n        enrolled: false,\r\n        confidence: 0,\r\n        errorRate: 0.03\r\n      },\r\n      {\r\n        type: 'iris',\r\n        available: false, // Not commonly available in web browsers\r\n        enrolled: false,\r\n        confidence: 0,\r\n        errorRate: 0.01\r\n      },\r\n      {\r\n        type: 'palm',\r\n        available: false, // Not commonly available in web browsers\r\n        enrolled: false,\r\n        confidence: 0,\r\n        errorRate: 0.01\r\n      }\r\n    ];\r\n  }\r\n\r\n  private isFingerprintAvailable(): boolean {\r\n    // Check for WebAuthn support\r\n    return !!(navigator.credentials && window.PublicKeyCredential);\r\n  }\r\n\r\n  private isFaceRecognitionAvailable(): boolean {\r\n    // Check for camera access and face detection capabilities\r\n    return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\r\n  }\r\n\r\n  private isVoiceRecognitionAvailable(): boolean {\r\n    // Check for speech recognition capabilities\r\n    return !!((window as any).SpeechRecognition || (window as any).webkitSpeechRecognition);\r\n  }\r\n\r\n  // Initialize biometric authentication for a user\r\n  async initializeUser(userId: string): Promise<BiometricSettings> {\r\n    const defaultSettings: BiometricSettings = {\r\n      userId,\r\n      enabled: false,\r\n      fallbackToPassword: true,\r\n      requireBiometricForPayments: false,\r\n      requireBiometricForSensitiveActions: false,\r\n      allowedTypes: ['fingerprint', 'face', 'voice'],\r\n      qualityThreshold: 0.7,\r\n      maxRetries: 3,\r\n      sessionTimeout: 30,\r\n      autoLock: true,\r\n      autoLockTimeout: 5\r\n    };\r\n\r\n    this.settings = defaultSettings;\r\n    return defaultSettings;\r\n  }\r\n\r\n  // Get available biometric capabilities\r\n  getCapabilities(): BiometricCapability[] {\r\n    return this.capabilities.filter(cap => cap.available);\r\n  }\r\n\r\n  // Enroll a new biometric\r\n  async enrollBiometric(\r\n    userId: string,\r\n    type: 'fingerprint' | 'face' | 'voice' | 'iris' | 'palm',\r\n    biometricData: string\r\n  ): Promise<BiometricEnrollment> {\r\n    if (!this.settings || this.settings.userId !== userId) {\r\n      throw new Error('User not initialized');\r\n    }\r\n\r\n    const capability = this.capabilities.find(cap => cap.type === type);\r\n    if (!capability || !capability.available) {\r\n      throw new Error(`Biometric type ${type} not available`);\r\n    }\r\n\r\n    if (!this.settings.allowedTypes.includes(type)) {\r\n      throw new Error(`Biometric type ${type} not allowed`);\r\n    }\r\n\r\n    // Simulate biometric template creation\r\n    const template = await this.createBiometricTemplate(biometricData, type);\r\n    const quality = await this.assessBiometricQuality(biometricData, type);\r\n\r\n    if (quality < this.settings.qualityThreshold) {\r\n      throw new Error(`Biometric quality too low: ${quality.toFixed(2)} < ${this.settings.qualityThreshold}`);\r\n    }\r\n\r\n    const enrollment: BiometricEnrollment = {\r\n      id: this.generateId(),\r\n      userId,\r\n      type,\r\n      template,\r\n      quality,\r\n      enrolledAt: new Date(),\r\n      isActive: true,\r\n      metadata: {\r\n        deviceId: this.getDeviceId(),\r\n        os: this.getOS(),\r\n        browser: this.getBrowser(),\r\n        location: await this.getLocation()\r\n      }\r\n    };\r\n\r\n    this.enrollments.push(enrollment);\r\n    capability.enrolled = true;\r\n    capability.confidence = quality;\r\n\r\n    return enrollment;\r\n  }\r\n\r\n  // Authenticate using biometric\r\n  async authenticateBiometric(\r\n    userId: string,\r\n    type: 'fingerprint' | 'face' | 'voice' | 'iris' | 'palm',\r\n    biometricData: string\r\n  ): Promise<{ success: boolean; confidence: number; challengeId?: string }> {\r\n    const startTime = Date.now();\r\n\r\n    if (!this.settings || this.settings.userId !== userId) {\r\n      throw new Error('User not initialized');\r\n    }\r\n\r\n    const enrollment = this.enrollments.find(\r\n      e => e.userId === userId && e.type === type && e.isActive\r\n    );\r\n\r\n    if (!enrollment) {\r\n      throw new Error(`No ${type} enrollment found for user`);\r\n    }\r\n\r\n    // Simulate biometric matching\r\n    const confidence = await this.matchBiometric(biometricData, enrollment.template, type);\r\n    const success = confidence >= this.settings.qualityThreshold;\r\n\r\n    // Update analytics\r\n    this.updateAnalytics(type, success, Date.now() - startTime);\r\n\r\n    if (success) {\r\n      enrollment.lastUsed = new Date();\r\n      const capability = this.capabilities.find(cap => cap.type === type);\r\n      if (capability) {\r\n        capability.confidence = confidence;\r\n      }\r\n    }\r\n\r\n    return { success, confidence };\r\n  }\r\n\r\n  // Create a biometric challenge for multi-factor authentication\r\n  async createBiometricChallenge(\r\n    userId: string,\r\n    type: 'fingerprint' | 'face' | 'voice' | 'iris' | 'palm'\r\n  ): Promise<BiometricChallenge> {\r\n    const challenge: BiometricChallenge = {\r\n      id: this.generateId(),\r\n      userId,\r\n      type,\r\n      challenge: this.generateChallenge(),\r\n      expiresAt: new Date(Date.now() + 5 * 60 * 1000), // 5 minutes\r\n      attempts: 0,\r\n      maxAttempts: 3,\r\n      status: 'pending',\r\n      createdAt: new Date()\r\n    };\r\n\r\n    this.challenges.push(challenge);\r\n    return challenge;\r\n  }\r\n\r\n  // Verify a biometric challenge\r\n  async verifyBiometricChallenge(\r\n    challengeId: string,\r\n    biometricData: string\r\n  ): Promise<{ success: boolean; confidence: number }> {\r\n    const challenge = this.challenges.find(c => c.id === challengeId);\r\n    if (!challenge) {\r\n      throw new Error('Challenge not found');\r\n    }\r\n\r\n    if (challenge.status !== 'pending') {\r\n      throw new Error('Challenge not pending');\r\n    }\r\n\r\n    if (challenge.expiresAt < new Date()) {\r\n      challenge.status = 'expired';\r\n      throw new Error('Challenge expired');\r\n    }\r\n\r\n    if (challenge.attempts >= challenge.maxAttempts) {\r\n      challenge.status = 'failed';\r\n      throw new Error('Max attempts exceeded');\r\n    }\r\n\r\n    challenge.attempts++;\r\n\r\n    const result = await this.authenticateBiometric(challenge.userId, challenge.type, biometricData);\r\n    \r\n    if (result.success) {\r\n      challenge.status = 'completed';\r\n    } else if (challenge.attempts >= challenge.maxAttempts) {\r\n      challenge.status = 'failed';\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // Get user's biometric enrollments\r\n  getUserEnrollments(userId: string): BiometricEnrollment[] {\r\n    return this.enrollments.filter(e => e.userId === userId && e.isActive);\r\n  }\r\n\r\n  // Update biometric settings\r\n  async updateSettings(settings: Partial<BiometricSettings>): Promise<void> {\r\n    if (!this.settings) {\r\n      throw new Error('User not initialized');\r\n    }\r\n\r\n    this.settings = { ...this.settings, ...settings };\r\n  }\r\n\r\n  // Get biometric analytics\r\n  getAnalytics(): BiometricAnalytics {\r\n    return { ...this.analytics };\r\n  }\r\n\r\n  // Delete a biometric enrollment\r\n  async deleteEnrollment(enrollmentId: string): Promise<void> {\r\n    const enrollment = this.enrollments.find(e => e.id === enrollmentId);\r\n    if (enrollment) {\r\n      enrollment.isActive = false;\r\n      \r\n      // Update capability status\r\n      const capability = this.capabilities.find(cap => cap.type === enrollment.type);\r\n      if (capability) {\r\n        const hasOtherEnrollments = this.enrollments.some(\r\n          e => e.userId === enrollment.userId && e.type === enrollment.type && e.isActive\r\n        );\r\n        capability.enrolled = hasOtherEnrollments;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Private helper methods\r\n  private async createBiometricTemplate(data: string, type: string): Promise<string> {\r\n    // Simulate biometric template creation\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    return `template_${type}_${this.generateId()}`;\r\n  }\r\n\r\n  private async assessBiometricQuality(data: string, type: string): Promise<number> {\r\n    // Simulate quality assessment\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    return Math.random() * 0.3 + 0.7; // 0.7-1.0\r\n  }\r\n\r\n  private async matchBiometric(data: string, template: string, type: string): Promise<number> {\r\n    // Simulate biometric matching\r\n    await new Promise(resolve => setTimeout(resolve, 800));\r\n    return Math.random() * 0.4 + 0.6; // 0.6-1.0\r\n  }\r\n\r\n  private generateChallenge(): string {\r\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n  }\r\n\r\n  private generateId(): string {\r\n    return Math.random().toString(36).substr(2, 9);\r\n  }\r\n\r\n  private getDeviceId(): string {\r\n    return localStorage.getItem('deviceId') || this.generateId();\r\n  }\r\n\r\n  private getOS(): string {\r\n    const userAgent = navigator.userAgent;\r\n    if (userAgent.includes('Windows')) return 'Windows';\r\n    if (userAgent.includes('Mac')) return 'macOS';\r\n    if (userAgent.includes('Linux')) return 'Linux';\r\n    if (userAgent.includes('Android')) return 'Android';\r\n    if (userAgent.includes('iOS')) return 'iOS';\r\n    return 'Unknown';\r\n  }\r\n\r\n  private getBrowser(): string {\r\n    const userAgent = navigator.userAgent;\r\n    if (userAgent.includes('Chrome')) return 'Chrome';\r\n    if (userAgent.includes('Firefox')) return 'Firefox';\r\n    if (userAgent.includes('Safari')) return 'Safari';\r\n    if (userAgent.includes('Edge')) return 'Edge';\r\n    return 'Unknown';\r\n  }\r\n\r\n  private async getLocation(): Promise<string> {\r\n    try {\r\n      const response = await fetch('https://ipapi.co/json/');\r\n      const data = await response.json();\r\n      return `${data.city}, ${data.region}, ${data.country}`;\r\n    } catch {\r\n      return 'Unknown';\r\n    }\r\n  }\r\n\r\n  private updateAnalytics(type: string, success: boolean, responseTime: number): void {\r\n    this.analytics.totalAttempts++;\r\n    \r\n    if (success) {\r\n      this.analytics.successfulAttempts++;\r\n    } else {\r\n      this.analytics.failedAttempts++;\r\n    }\r\n\r\n    this.analytics.successRate = this.analytics.successfulAttempts / this.analytics.totalAttempts;\r\n    this.analytics.averageResponseTime = \r\n      (this.analytics.averageResponseTime * (this.analytics.totalAttempts - 1) + responseTime) / \r\n      this.analytics.totalAttempts;\r\n\r\n    // Update type breakdown\r\n    const typeBreakdown = this.analytics.typeBreakdown[type as keyof typeof this.analytics.typeBreakdown];\r\n    if (typeBreakdown) {\r\n      typeBreakdown.attempts++;\r\n      const currentSuccessRate = typeBreakdown.successRate * (typeBreakdown.attempts - 1);\r\n      typeBreakdown.successRate = (currentSuccessRate + (success ? 1 : 0)) / typeBreakdown.attempts;\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const biometricAuthService = new BiometricAuthService();\r\nexport default biometricAuthService;\r\n","// Enhanced Fraud Detection Service with ML-powered risk assessment\r\n// Provides comprehensive fraud detection using multiple algorithms and patterns\r\n\r\nexport interface FraudRiskAssessment {\r\n  transactionId: string;\r\n  riskScore: number; // 0-100\r\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\r\n  confidence: number; // 0-1\r\n  factors: FraudFactor[];\r\n  recommendedAction: 'approve' | 'review' | 'block' | 'require_verification';\r\n  verificationRequired: boolean;\r\n  estimatedLoss: number;\r\n  processingTime: number; // milliseconds\r\n}\r\n\r\nexport interface FraudFactor {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  weight: number; // 0-1\r\n  impact: number; // 0-100\r\n  category: 'transaction' | 'behavioral' | 'device' | 'location' | 'temporal' | 'network';\r\n  evidence: any;\r\n}\r\n\r\nexport interface FraudPattern {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  pattern: string;\r\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\r\n  frequency: number;\r\n  lastDetected: Date;\r\n  falsePositiveRate: number;\r\n  accuracy: number;\r\n  isActive: boolean;\r\n  rules: FraudRule[];\r\n}\r\n\r\nexport interface FraudRule {\r\n  id: string;\r\n  name: string;\r\n  condition: string;\r\n  weight: number;\r\n  threshold: number;\r\n  isEnabled: boolean;\r\n  lastTriggered?: Date;\r\n  triggerCount: number;\r\n}\r\n\r\nexport interface DeviceFingerprint {\r\n  id: string;\r\n  deviceId: string;\r\n  browser: string;\r\n  os: string;\r\n  screenResolution: string;\r\n  timezone: string;\r\n  language: string;\r\n  plugins: string[];\r\n  canvas: string;\r\n  webgl: string;\r\n  audio: string;\r\n  fonts: string[];\r\n  hardware: {\r\n    cores: number;\r\n    memory: number;\r\n    storage: number;\r\n  };\r\n  network: {\r\n    connectionType: string;\r\n    ipAddress: string;\r\n    isp: string;\r\n    country: string;\r\n    city: string;\r\n  };\r\n  behavior: {\r\n    mouseMovement: number[];\r\n    keystrokeTiming: number[];\r\n    scrollPattern: number[];\r\n    clickPattern: number[];\r\n  };\r\n  riskScore: number;\r\n  isTrusted: boolean;\r\n  lastSeen: Date;\r\n}\r\n\r\nexport interface TransactionContext {\r\n  transactionId: string;\r\n  userId: string;\r\n  amount: number;\r\n  currency: string;\r\n  type: 'send' | 'receive' | 'withdraw' | 'deposit';\r\n  recipient?: string;\r\n  merchant?: string;\r\n  category: string;\r\n  timestamp: Date;\r\n  location: {\r\n    latitude: number;\r\n    longitude: number;\r\n    country: string;\r\n    city: string;\r\n    ipAddress: string;\r\n  };\r\n  device: DeviceFingerprint;\r\n  userHistory: {\r\n    totalTransactions: number;\r\n    averageAmount: number;\r\n    maxAmount: number;\r\n    lastTransaction?: Date;\r\n    frequentRecipients: string[];\r\n    frequentMerchants: string[];\r\n    spendingPattern: number[];\r\n  };\r\n}\r\n\r\nexport interface FraudAlert {\r\n  id: string;\r\n  type: 'suspicious_transaction' | 'unusual_pattern' | 'location_anomaly' | 'device_anomaly' | 'velocity_anomaly' | 'account_takeover' | 'money_laundering';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  title: string;\r\n  description: string;\r\n  timestamp: Date;\r\n  transactionId?: string;\r\n  userId: string;\r\n  riskScore: number;\r\n  status: 'active' | 'investigating' | 'resolved' | 'false_positive';\r\n  recommendedAction: string;\r\n  autoResolved: boolean;\r\n  factors: FraudFactor[];\r\n  evidence: any;\r\n  resolution?: {\r\n    resolvedBy: string;\r\n    resolvedAt: Date;\r\n    action: string;\r\n    notes: string;\r\n  };\r\n}\r\n\r\nexport interface FraudAnalytics {\r\n  totalTransactions: number;\r\n  flaggedTransactions: number;\r\n  falsePositives: number;\r\n  truePositives: number;\r\n  detectionRate: number;\r\n  accuracy: number;\r\n  averageRiskScore: number;\r\n  topRiskFactors: Array<{ factor: string; count: number; impact: number }>;\r\n  patternBreakdown: Array<{ pattern: string; count: number; accuracy: number }>;\r\n  timeBreakdown: Array<{ hour: number; transactions: number; riskScore: number }>;\r\n  locationBreakdown: Array<{ country: string; transactions: number; riskScore: number }>;\r\n  deviceBreakdown: Array<{ deviceType: string; transactions: number; riskScore: number }>;\r\n}\r\n\r\nclass EnhancedFraudDetectionService {\r\n  private patterns: FraudPattern[] = [];\r\n  private rules: FraudRule[] = [];\r\n  private deviceFingerprints: Map<string, DeviceFingerprint> = new Map();\r\n  private alerts: FraudAlert[] = [];\r\n  private analytics: FraudAnalytics = {\r\n    totalTransactions: 0,\r\n    flaggedTransactions: 0,\r\n    falsePositives: 0,\r\n    truePositives: 0,\r\n    detectionRate: 0,\r\n    accuracy: 0,\r\n    averageRiskScore: 0,\r\n    topRiskFactors: [],\r\n    patternBreakdown: [],\r\n    timeBreakdown: [],\r\n    locationBreakdown: [],\r\n    deviceBreakdown: []\r\n  };\r\n\r\n  constructor() {\r\n    this.initializePatterns();\r\n    this.initializeRules();\r\n  }\r\n\r\n  private initializePatterns(): void {\r\n    this.patterns = [\r\n      {\r\n        id: 'high_amount_velocity',\r\n        name: 'High Amount Velocity',\r\n        description: 'Multiple high-value transactions in short time',\r\n        pattern: 'amount_velocity',\r\n        riskLevel: 'high',\r\n        frequency: 0,\r\n        lastDetected: new Date(),\r\n        falsePositiveRate: 0.05,\r\n        accuracy: 0.95,\r\n        isActive: true,\r\n        rules: [\r\n          {\r\n            id: 'rule_1',\r\n            name: 'Multiple High Amounts',\r\n            condition: 'amount > 1000 AND count(transactions) > 3 IN 1 hour',\r\n            weight: 0.8,\r\n            threshold: 0.7,\r\n            isEnabled: true,\r\n            triggerCount: 0\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'unusual_location',\r\n        name: 'Unusual Location',\r\n        description: 'Transaction from new or suspicious location',\r\n        pattern: 'location_anomaly',\r\n        riskLevel: 'medium',\r\n        frequency: 0,\r\n        lastDetected: new Date(),\r\n        falsePositiveRate: 0.15,\r\n        accuracy: 0.85,\r\n        isActive: true,\r\n        rules: [\r\n          {\r\n            id: 'rule_2',\r\n            name: 'New Country',\r\n            condition: 'country NOT IN user_history.countries',\r\n            weight: 0.6,\r\n            threshold: 0.5,\r\n            isEnabled: true,\r\n            triggerCount: 0\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'device_anomaly',\r\n        name: 'Device Anomaly',\r\n        description: 'Transaction from new or suspicious device',\r\n        pattern: 'device_anomaly',\r\n        riskLevel: 'high',\r\n        frequency: 0,\r\n        lastDetected: new Date(),\r\n        falsePositiveRate: 0.08,\r\n        accuracy: 0.92,\r\n        isActive: true,\r\n        rules: [\r\n          {\r\n            id: 'rule_3',\r\n            name: 'New Device',\r\n            condition: 'device_id NOT IN user_history.devices',\r\n            weight: 0.7,\r\n            threshold: 0.6,\r\n            isEnabled: true,\r\n            triggerCount: 0\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'time_anomaly',\r\n        name: 'Time Anomaly',\r\n        description: 'Transaction at unusual time',\r\n        pattern: 'temporal_anomaly',\r\n        riskLevel: 'low',\r\n        frequency: 0,\r\n        lastDetected: new Date(),\r\n        falsePositiveRate: 0.25,\r\n        accuracy: 0.75,\r\n        isActive: true,\r\n        rules: [\r\n          {\r\n            id: 'rule_4',\r\n            name: 'Unusual Hour',\r\n            condition: 'hour < 6 OR hour > 22',\r\n            weight: 0.3,\r\n            threshold: 0.4,\r\n            isEnabled: true,\r\n            triggerCount: 0\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 'money_laundering',\r\n        name: 'Money Laundering Pattern',\r\n        description: 'Structured transactions to avoid reporting',\r\n        pattern: 'money_laundering',\r\n        riskLevel: 'critical',\r\n        frequency: 0,\r\n        lastDetected: new Date(),\r\n        falsePositiveRate: 0.02,\r\n        accuracy: 0.98,\r\n        isActive: true,\r\n        rules: [\r\n          {\r\n            id: 'rule_5',\r\n            name: 'Structured Amounts',\r\n            condition: 'amount BETWEEN 9000 AND 10000 AND count(transactions) > 5 IN 1 day',\r\n            weight: 0.9,\r\n            threshold: 0.8,\r\n            isEnabled: true,\r\n            triggerCount: 0\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n  }\r\n\r\n  private initializeRules(): void {\r\n    this.rules = [\r\n      {\r\n        id: 'rule_amount_threshold',\r\n        name: 'Amount Threshold',\r\n        condition: 'amount > 5000',\r\n        weight: 0.4,\r\n        threshold: 0.3,\r\n        isEnabled: true,\r\n        triggerCount: 0\r\n      },\r\n      {\r\n        id: 'rule_velocity_check',\r\n        name: 'Velocity Check',\r\n        condition: 'count(transactions) > 10 IN 1 hour',\r\n        weight: 0.6,\r\n        threshold: 0.5,\r\n        isEnabled: true,\r\n        triggerCount: 0\r\n      },\r\n      {\r\n        id: 'rule_recipient_check',\r\n        name: 'Recipient Check',\r\n        condition: 'recipient IN blacklist',\r\n        weight: 0.8,\r\n        threshold: 0.7,\r\n        isEnabled: true,\r\n        triggerCount: 0\r\n      },\r\n      {\r\n        id: 'rule_device_trust',\r\n        name: 'Device Trust',\r\n        condition: 'device.risk_score > 0.7',\r\n        weight: 0.5,\r\n        threshold: 0.4,\r\n        isEnabled: true,\r\n        triggerCount: 0\r\n      }\r\n    ];\r\n  }\r\n\r\n  // Main fraud detection method\r\n  async assessTransactionRisk(context: TransactionContext): Promise<FraudRiskAssessment> {\r\n    const startTime = Date.now();\r\n    \r\n    // Update device fingerprint\r\n    await this.updateDeviceFingerprint(context.device);\r\n    \r\n    // Calculate risk factors\r\n    const factors = await this.calculateRiskFactors(context);\r\n    \r\n    // Calculate overall risk score\r\n    const riskScore = this.calculateRiskScore(factors);\r\n    const riskLevel = this.getRiskLevel(riskScore);\r\n    \r\n    // Determine recommended action\r\n    const recommendedAction = this.getRecommendedAction(riskScore, factors);\r\n    \r\n    // Update analytics\r\n    this.updateAnalytics(context, riskScore, factors);\r\n    \r\n    // Create alert if high risk\r\n    if (riskLevel === 'high' || riskLevel === 'critical') {\r\n      await this.createFraudAlert(context, riskScore, factors);\r\n    }\r\n    \r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    return {\r\n      transactionId: context.transactionId,\r\n      riskScore,\r\n      riskLevel,\r\n      confidence: this.calculateConfidence(factors),\r\n      factors,\r\n      recommendedAction,\r\n      verificationRequired: riskLevel === 'high' || riskLevel === 'critical',\r\n      estimatedLoss: this.estimatePotentialLoss(context, riskScore),\r\n      processingTime\r\n    };\r\n  }\r\n\r\n  private async calculateRiskFactors(context: TransactionContext): Promise<FraudFactor[]> {\r\n    const factors: FraudFactor[] = [];\r\n    \r\n    // Amount-based factors\r\n    if (context.amount > context.userHistory.maxAmount * 1.5) {\r\n      factors.push({\r\n        id: 'high_amount',\r\n        name: 'High Amount',\r\n        description: `Amount $${context.amount} is significantly higher than user's max amount $${context.userHistory.maxAmount}`,\r\n        weight: 0.7,\r\n        impact: Math.min(100, (context.amount / context.userHistory.maxAmount) * 50),\r\n        category: 'transaction',\r\n        evidence: { amount: context.amount, maxAmount: context.userHistory.maxAmount }\r\n      });\r\n    }\r\n    \r\n    // Velocity-based factors\r\n    const recentTransactions = await this.getRecentTransactions(context.userId, 1); // Last hour\r\n    if (recentTransactions.length > 5) {\r\n      factors.push({\r\n        id: 'high_velocity',\r\n        name: 'High Velocity',\r\n        description: `${recentTransactions.length} transactions in the last hour`,\r\n        weight: 0.6,\r\n        impact: Math.min(100, recentTransactions.length * 10),\r\n        category: 'behavioral',\r\n        evidence: { count: recentTransactions.length, timeWindow: '1 hour' }\r\n      });\r\n    }\r\n    \r\n    // Location-based factors\r\n    const isNewLocation = !context.userHistory.frequentRecipients.includes(context.recipient || '');\r\n    if (isNewLocation) {\r\n      factors.push({\r\n        id: 'new_location',\r\n        name: 'New Location',\r\n        description: `Transaction from new location: ${context.location.city}, ${context.location.country}`,\r\n        weight: 0.5,\r\n        impact: 60,\r\n        category: 'location',\r\n        evidence: { location: context.location, isNew: true }\r\n      });\r\n    }\r\n    \r\n    // Device-based factors\r\n    if (context.device.riskScore > 0.7) {\r\n      factors.push({\r\n        id: 'suspicious_device',\r\n        name: 'Suspicious Device',\r\n        description: `Device risk score ${context.device.riskScore.toFixed(2)} indicates potential fraud`,\r\n        weight: 0.8,\r\n        impact: context.device.riskScore * 100,\r\n        category: 'device',\r\n        evidence: { deviceRiskScore: context.device.riskScore }\r\n      });\r\n    }\r\n    \r\n    // Time-based factors\r\n    const hour = context.timestamp.getHours();\r\n    if (hour < 6 || hour > 22) {\r\n      factors.push({\r\n        id: 'unusual_time',\r\n        name: 'Unusual Time',\r\n        description: `Transaction at unusual hour: ${hour}:00`,\r\n        weight: 0.3,\r\n        impact: 40,\r\n        category: 'temporal',\r\n        evidence: { hour, isUnusual: true }\r\n      });\r\n    }\r\n    \r\n    // Pattern-based factors\r\n    const patternFactors = await this.checkPatterns(context);\r\n    factors.push(...patternFactors);\r\n    \r\n    return factors;\r\n  }\r\n\r\n  private async checkPatterns(context: TransactionContext): Promise<FraudFactor[]> {\r\n    const factors: FraudFactor[] = [];\r\n    \r\n    for (const pattern of this.patterns) {\r\n      if (!pattern.isActive) continue;\r\n      \r\n      let patternScore = 0;\r\n      let triggeredRules = 0;\r\n      \r\n      for (const rule of pattern.rules) {\r\n        if (!rule.isEnabled) continue;\r\n        \r\n        const ruleScore = await this.evaluateRule(rule, context);\r\n        if (ruleScore >= rule.threshold) {\r\n          patternScore += rule.weight * ruleScore;\r\n          triggeredRules++;\r\n          rule.triggerCount++;\r\n          rule.lastTriggered = new Date();\r\n        }\r\n      }\r\n      \r\n      if (triggeredRules > 0) {\r\n        factors.push({\r\n          id: `pattern_${pattern.id}`,\r\n          name: pattern.name,\r\n          description: pattern.description,\r\n          weight: patternScore / triggeredRules,\r\n          impact: patternScore * 100,\r\n          category: 'behavioral',\r\n          evidence: { pattern: pattern.id, triggeredRules, score: patternScore }\r\n        });\r\n        \r\n        pattern.frequency++;\r\n        pattern.lastDetected = new Date();\r\n      }\r\n    }\r\n    \r\n    return factors;\r\n  }\r\n\r\n  private async evaluateRule(rule: FraudRule, context: TransactionContext): Promise<number> {\r\n    // Simplified rule evaluation - in a real implementation, this would use a proper rule engine\r\n    switch (rule.id) {\r\n      case 'rule_amount_threshold':\r\n        return context.amount > 5000 ? 1 : 0;\r\n      case 'rule_velocity_check':\r\n        const recentCount = await this.getRecentTransactions(context.userId, 1).then(t => t.length);\r\n        return recentCount > 10 ? 1 : 0;\r\n      case 'rule_recipient_check':\r\n        // Simulate blacklist check\r\n        return Math.random() < 0.1 ? 1 : 0;\r\n      case 'rule_device_trust':\r\n        return context.device.riskScore;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  private calculateRiskScore(factors: FraudFactor[]): number {\r\n    if (factors.length === 0) return 0;\r\n    \r\n    const totalWeight = factors.reduce((sum, factor) => sum + factor.weight, 0);\r\n    const weightedScore = factors.reduce((sum, factor) => \r\n      sum + (factor.weight * factor.impact), 0\r\n    );\r\n    \r\n    return Math.min(100, weightedScore / totalWeight);\r\n  }\r\n\r\n  private getRiskLevel(riskScore: number): 'low' | 'medium' | 'high' | 'critical' {\r\n    if (riskScore >= 80) return 'critical';\r\n    if (riskScore >= 60) return 'high';\r\n    if (riskScore >= 30) return 'medium';\r\n    return 'low';\r\n  }\r\n\r\n  private getRecommendedAction(riskScore: number, factors: FraudFactor[]): 'approve' | 'review' | 'block' | 'require_verification' {\r\n    if (riskScore >= 80) return 'block';\r\n    if (riskScore >= 60) return 'require_verification';\r\n    if (riskScore >= 30) return 'review';\r\n    return 'approve';\r\n  }\r\n\r\n  private calculateConfidence(factors: FraudFactor[]): number {\r\n    if (factors.length === 0) return 0;\r\n    \r\n    const avgWeight = factors.reduce((sum, factor) => sum + factor.weight, 0) / factors.length;\r\n    const avgImpact = factors.reduce((sum, factor) => sum + factor.impact, 0) / factors.length;\r\n    \r\n    return Math.min(1, (avgWeight + avgImpact / 100) / 2);\r\n  }\r\n\r\n  private estimatePotentialLoss(context: TransactionContext, riskScore: number): number {\r\n    return context.amount * (riskScore / 100);\r\n  }\r\n\r\n  private async updateDeviceFingerprint(device: DeviceFingerprint): Promise<void> {\r\n    const existing = this.deviceFingerprints.get(device.deviceId);\r\n    if (existing) {\r\n      existing.lastSeen = new Date();\r\n      existing.riskScore = this.calculateDeviceRiskScore(device);\r\n    } else {\r\n      device.riskScore = this.calculateDeviceRiskScore(device);\r\n      this.deviceFingerprints.set(device.deviceId, device);\r\n    }\r\n  }\r\n\r\n  private calculateDeviceRiskScore(device: DeviceFingerprint): number {\r\n    let score = 0;\r\n    \r\n    // Check for suspicious browser/OS combinations\r\n    if (device.browser === 'Unknown' || device.os === 'Unknown') score += 0.3;\r\n    \r\n    // Check for suspicious hardware\r\n    if (device.hardware.cores < 2 || device.hardware.memory < 4) score += 0.2;\r\n    \r\n    // Check for suspicious network\r\n    if (device.network.connectionType === 'unknown') score += 0.2;\r\n    \r\n    // Check for suspicious behavior patterns\r\n    const avgMouseMovement = device.behavior.mouseMovement.reduce((a, b) => a + b, 0) / device.behavior.mouseMovement.length;\r\n    if (avgMouseMovement < 10) score += 0.3; // Too linear/robotic\r\n    \r\n    return Math.min(1, score);\r\n  }\r\n\r\n  private async createFraudAlert(context: TransactionContext, riskScore: number, factors: FraudFactor[]): Promise<void> {\r\n    const alert: FraudAlert = {\r\n      id: this.generateId(),\r\n      type: this.getAlertType(factors),\r\n      severity: this.getRiskLevel(riskScore),\r\n      title: this.getAlertTitle(factors),\r\n      description: this.getAlertDescription(context, factors),\r\n      timestamp: new Date(),\r\n      transactionId: context.transactionId,\r\n      userId: context.userId,\r\n      riskScore,\r\n      status: 'active',\r\n      recommendedAction: this.getRecommendedAction(riskScore, factors),\r\n      autoResolved: false,\r\n      factors,\r\n      evidence: { context, factors }\r\n    };\r\n    \r\n    this.alerts.push(alert);\r\n  }\r\n\r\n  private getAlertType(factors: FraudFactor[]): FraudAlert['type'] {\r\n    const categories = factors.map(f => f.category);\r\n    if (categories.includes('device')) return 'device_anomaly';\r\n    if (categories.includes('location')) return 'location_anomaly';\r\n    if (categories.includes('behavioral')) return 'unusual_pattern';\r\n    return 'suspicious_transaction';\r\n  }\r\n\r\n  private getAlertTitle(factors: FraudFactor[]): string {\r\n    const topFactor = factors.reduce((max, factor) => \r\n      factor.impact > max.impact ? factor : max\r\n    );\r\n    return `Fraud Alert: ${topFactor.name}`;\r\n  }\r\n\r\n  private getAlertDescription(context: TransactionContext, factors: FraudFactor[]): string {\r\n    return `Transaction ${context.transactionId} flagged for ${factors.length} risk factors. Amount: $${context.amount}`;\r\n  }\r\n\r\n  private async getRecentTransactions(userId: string, hours: number): Promise<any[]> {\r\n    // Mock implementation - in real app, this would query the database\r\n    return [];\r\n  }\r\n\r\n  private updateAnalytics(context: TransactionContext, riskScore: number, factors: FraudFactor[]): void {\r\n    this.analytics.totalTransactions++;\r\n    \r\n    if (riskScore >= 30) {\r\n      this.analytics.flaggedTransactions++;\r\n    }\r\n    \r\n    this.analytics.averageRiskScore = \r\n      (this.analytics.averageRiskScore * (this.analytics.totalTransactions - 1) + riskScore) / \r\n      this.analytics.totalTransactions;\r\n    \r\n    // Update factor breakdown\r\n    factors.forEach(factor => {\r\n      const existing = this.analytics.topRiskFactors.find(f => f.factor === factor.name);\r\n      if (existing) {\r\n        existing.count++;\r\n        existing.impact = (existing.impact + factor.impact) / 2;\r\n      } else {\r\n        this.analytics.topRiskFactors.push({\r\n          factor: factor.name,\r\n          count: 1,\r\n          impact: factor.impact\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private generateId(): string {\r\n    return Math.random().toString(36).substr(2, 9);\r\n  }\r\n\r\n  // Public methods\r\n  getAlerts(): FraudAlert[] {\r\n    return [...this.alerts];\r\n  }\r\n\r\n  getAnalytics(): FraudAnalytics {\r\n    return { ...this.analytics };\r\n  }\r\n\r\n  getPatterns(): FraudPattern[] {\r\n    return [...this.patterns];\r\n  }\r\n\r\n  getRules(): FraudRule[] {\r\n    return [...this.rules];\r\n  }\r\n\r\n  updatePattern(patternId: string, updates: Partial<FraudPattern>): void {\r\n    const pattern = this.patterns.find(p => p.id === patternId);\r\n    if (pattern) {\r\n      Object.assign(pattern, updates);\r\n    }\r\n  }\r\n\r\n  updateRule(ruleId: string, updates: Partial<FraudRule>): void {\r\n    const rule = this.rules.find(r => r.id === ruleId);\r\n    if (rule) {\r\n      Object.assign(rule, updates);\r\n    }\r\n  }\r\n\r\n  resolveAlert(alertId: string, resolution: FraudAlert['resolution']): void {\r\n    const alert = this.alerts.find(a => a.id === alertId);\r\n    if (alert) {\r\n      alert.status = 'resolved';\r\n      alert.resolution = resolution;\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const enhancedFraudDetectionService = new EnhancedFraudDetectionService();\r\nexport default enhancedFraudDetectionService;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { \r\n  ShieldCheckIcon, \r\n  ExclamationTriangleIcon,\r\n  CheckCircleIcon,\r\n  XCircleIcon,\r\n  EyeIcon,\r\n  EyeSlashIcon,\r\n  FingerPrintIcon,\r\n  FaceSmileIcon,\r\n  MicrophoneIcon,\r\n  DevicePhoneMobileIcon,\r\n  ComputerDesktopIcon,\r\n  MapPinIcon,\r\n  ClockIcon,\r\n  ChartBarIcon,\r\n  CogIcon,\r\n  BellIcon,\r\n  LockClosedIcon,\r\n  KeyIcon,\r\n  UserGroupIcon,\r\n  GlobeAltIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { biometricAuthService, BiometricCapability, BiometricEnrollment, BiometricSettings, BiometricAnalytics } from '../services/biometricAuthService';\r\nimport { enhancedFraudDetectionService, FraudAlert, FraudAnalytics, FraudPattern, FraudRule } from '../services/enhancedFraudDetectionService';\r\n\r\nconst EnhancedSecurityDashboard: React.FC = () => {\r\n  const { user } = useAuth();\r\n  const [activeTab, setActiveTab] = useState<'overview' | 'biometric' | 'fraud' | 'settings'>('overview');\r\n  const [capabilities, setCapabilities] = useState<BiometricCapability[]>([]);\r\n  const [enrollments, setEnrollments] = useState<BiometricEnrollment[]>([]);\r\n  const [biometricSettings, setBiometricSettings] = useState<BiometricSettings | null>(null);\r\n  const [biometricAnalytics, setBiometricAnalytics] = useState<BiometricAnalytics | null>(null);\r\n  const [fraudAlerts, setFraudAlerts] = useState<FraudAlert[]>([]);\r\n  const [fraudAnalytics, setFraudAnalytics] = useState<FraudAnalytics | null>(null);\r\n  const [patterns, setPatterns] = useState<FraudPattern[]>([]);\r\n  const [rules, setRules] = useState<FraudRule[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const loadData = useCallback(async () => {\r\n    if (!user) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      // Initialize biometric service\r\n      const settings = await biometricAuthService.initializeUser(user.id);\r\n      const caps = biometricAuthService.getCapabilities();\r\n      const enrolls = biometricAuthService.getUserEnrollments(user.id);\r\n      const bioAnalytics = biometricAuthService.getAnalytics();\r\n\r\n      // Load fraud detection data\r\n      const alerts = enhancedFraudDetectionService.getAlerts();\r\n      const fraudAnalyticsData = enhancedFraudDetectionService.getAnalytics();\r\n      const patternsData = enhancedFraudDetectionService.getPatterns();\r\n      const rulesData = enhancedFraudDetectionService.getRules();\r\n\r\n      setBiometricSettings(settings);\r\n      setCapabilities(caps);\r\n      setEnrollments(enrolls);\r\n      setBiometricAnalytics(bioAnalytics);\r\n      setFraudAlerts(alerts);\r\n      setFraudAnalytics(fraudAnalyticsData);\r\n      setPatterns(patternsData);\r\n      setRules(rulesData);\r\n    } catch (error) {\r\n      console.error('Error loading security data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [loadData]);\r\n\r\n  const getBiometricIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'fingerprint': return <FingerPrintIcon className=\"w-6 h-6\" />;\r\n      case 'face': return <FaceSmileIcon className=\"w-6 h-6\" />;\r\n      case 'voice': return <MicrophoneIcon className=\"w-6 h-6\" />;\r\n      case 'iris': return <EyeIcon className=\"w-6 h-6\" />;\r\n      case 'palm': return <DevicePhoneMobileIcon className=\"w-6 h-6\" />;\r\n      default: return <ShieldCheckIcon className=\"w-6 h-6\" />;\r\n    }\r\n  };\r\n\r\n  const getSeverityColor = (severity: string) => {\r\n    switch (severity) {\r\n      case 'critical': return 'text-red-600 bg-red-100 dark:bg-red-900/20 dark:text-red-300';\r\n      case 'high': return 'text-orange-600 bg-orange-100 dark:bg-orange-900/20 dark:text-orange-300';\r\n      case 'medium': return 'text-yellow-600 bg-yellow-100 dark:bg-yellow-900/20 dark:text-yellow-300';\r\n      default: return 'text-blue-600 bg-blue-100 dark:bg-blue-900/20 dark:text-blue-300';\r\n    }\r\n  };\r\n\r\n  const getRiskLevelColor = (level: string) => {\r\n    switch (level) {\r\n      case 'critical': return 'text-red-600 bg-red-100 dark:bg-red-900/20 dark:text-red-300';\r\n      case 'high': return 'text-orange-600 bg-orange-100 dark:bg-orange-900/20 dark:text-orange-300';\r\n      case 'medium': return 'text-yellow-600 bg-yellow-100 dark:bg-yellow-900/20 dark:text-yellow-300';\r\n      default: return 'text-green-600 bg-green-100 dark:bg-green-900/20 dark:text-green-300';\r\n    }\r\n  };\r\n\r\n  const enrollBiometric = async (type: 'fingerprint' | 'face' | 'voice' | 'iris' | 'palm') => {\r\n    try {\r\n      // Simulate biometric enrollment\r\n      const mockData = `mock_${type}_data_${Date.now()}`;\r\n      const enrollment = await biometricAuthService.enrollBiometric(user!.id, type, mockData);\r\n      setEnrollments(prev => [...prev, enrollment]);\r\n    } catch (error) {\r\n      console.error('Error enrolling biometric:', error);\r\n    }\r\n  };\r\n\r\n  const deleteEnrollment = async (enrollmentId: string) => {\r\n    try {\r\n      await biometricAuthService.deleteEnrollment(enrollmentId);\r\n      setEnrollments(prev => prev.filter(e => e.id !== enrollmentId));\r\n    } catch (error) {\r\n      console.error('Error deleting enrollment:', error);\r\n    }\r\n  };\r\n\r\n  const resolveAlert = (alertId: string) => {\r\n    enhancedFraudDetectionService.resolveAlert(alertId, {\r\n      resolvedBy: user!.id,\r\n      resolvedAt: new Date(),\r\n      action: 'Manual review completed',\r\n      notes: 'Alert resolved by user'\r\n    });\r\n    setFraudAlerts(prev => prev.map(alert => \r\n      alert.id === alertId ? { ...alert, status: 'resolved' as const } : alert\r\n    ));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-96\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white flex items-center\">\r\n            <ShieldCheckIcon className=\"w-8 h-8 text-orange-500 mr-3\" />\r\n            Enhanced Security Dashboard\r\n          </h2>\r\n          <p className=\"text-gray-600 dark:text-gray-300 mt-1\">\r\n            Comprehensive security monitoring and biometric authentication\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tabs */}\r\n      <div className=\"border-b border-gray-200 dark:border-gray-700\">\r\n        <nav className=\"-mb-px flex space-x-8\">\r\n          {[\r\n            { id: 'overview', name: 'Overview', icon: ChartBarIcon },\r\n            { id: 'biometric', name: 'Biometric Auth', icon: FingerPrintIcon },\r\n            { id: 'fraud', name: 'Fraud Detection', icon: ExclamationTriangleIcon },\r\n            { id: 'settings', name: 'Settings', icon: CogIcon }\r\n          ].map((tab) => {\r\n            const Icon = tab.icon;\r\n            return (\r\n              <button\r\n                key={tab.id}\r\n                onClick={() => setActiveTab(tab.id as any)}\r\n                className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\r\n                  activeTab === tab.id\r\n                    ? 'border-orange-500 text-orange-600 dark:text-orange-400'\r\n                    : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600'\r\n                }`}\r\n              >\r\n                <Icon className=\"w-5 h-5\" />\r\n                <span>{tab.name}</span>\r\n              </button>\r\n            );\r\n          })}\r\n        </nav>\r\n      </div>\r\n\r\n      {/* Tab Content */}\r\n      <div className=\"py-6\">\r\n        {activeTab === 'overview' && (\r\n          <div className=\"space-y-6\">\r\n            {/* Security Status Cards */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n              <motion.div\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n              >\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Biometric Enrollments</p>\r\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                      {enrollments.length}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-green-100 dark:bg-green-900/20 rounded-lg\">\r\n                    <FingerPrintIcon className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n\r\n              <motion.div\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ delay: 0.1 }}\r\n                className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n              >\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Active Alerts</p>\r\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                      {fraudAlerts.filter(a => a.status === 'active').length}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-red-100 dark:bg-red-900/20 rounded-lg\">\r\n                    <ExclamationTriangleIcon className=\"w-6 h-6 text-red-600 dark:text-red-400\" />\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n\r\n              <motion.div\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ delay: 0.2 }}\r\n                className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n              >\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Detection Rate</p>\r\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                      {fraudAnalytics ? `${(fraudAnalytics.detectionRate * 100).toFixed(1)}%` : '0%'}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-blue-100 dark:bg-blue-900/20 rounded-lg\">\r\n                    <ChartBarIcon className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n\r\n              <motion.div\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ delay: 0.3 }}\r\n                className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n              >\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Security Score</p>\r\n                    <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                      {biometricAnalytics ? `${(biometricAnalytics.successRate * 100).toFixed(0)}%` : '0%'}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"p-3 bg-orange-100 dark:bg-orange-900/20 rounded-lg\">\r\n                    <ShieldCheckIcon className=\"w-6 h-6 text-orange-600 dark:text-orange-400\" />\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n            </div>\r\n\r\n            {/* Recent Alerts */}\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: 0.4 }}\r\n              className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n            >\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                Recent Security Alerts\r\n              </h3>\r\n              <div className=\"space-y-3\">\r\n                {fraudAlerts.slice(0, 5).map((alert) => (\r\n                  <div key={alert.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <ExclamationTriangleIcon className=\"w-5 h-5 text-orange-500\" />\r\n                      <div>\r\n                        <p className=\"font-medium text-gray-900 dark:text-white\">{alert.title}</p>\r\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">{alert.description}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(alert.severity)}`}>\r\n                        {alert.severity.toUpperCase()}\r\n                      </span>\r\n                      {alert.status === 'active' && (\r\n                        <button\r\n                          onClick={() => resolveAlert(alert.id)}\r\n                          className=\"text-xs text-orange-600 dark:text-orange-400 hover:underline\"\r\n                        >\r\n                          Resolve\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </motion.div>\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'biometric' && (\r\n          <div className=\"space-y-6\">\r\n            {/* Biometric Capabilities */}\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n            >\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                Available Biometric Methods\r\n              </h3>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                {capabilities.map((capability) => (\r\n                  <div key={capability.type} className=\"p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\r\n                    <div className=\"flex items-center space-x-3 mb-3\">\r\n                      {getBiometricIcon(capability.type)}\r\n                      <div>\r\n                        <h4 className=\"font-medium text-gray-900 dark:text-white capitalize\">\r\n                          {capability.type.replace('_', ' ')}\r\n                        </h4>\r\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                          {capability.available ? 'Available' : 'Not Available'}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex justify-between text-sm\">\r\n                        <span className=\"text-gray-600 dark:text-gray-400\">Enrolled:</span>\r\n                        <span className={capability.enrolled ? 'text-green-600' : 'text-red-600'}>\r\n                          {capability.enrolled ? 'Yes' : 'No'}\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"flex justify-between text-sm\">\r\n                        <span className=\"text-gray-600 dark:text-gray-400\">Confidence:</span>\r\n                        <span className=\"text-gray-900 dark:text-white\">\r\n                          {(capability.confidence * 100).toFixed(0)}%\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"flex justify-between text-sm\">\r\n                        <span className=\"text-gray-600 dark:text-gray-400\">Error Rate:</span>\r\n                        <span className=\"text-gray-900 dark:text-white\">\r\n                          {(capability.errorRate * 100).toFixed(1)}%\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    {capability.available && !capability.enrolled && (\r\n                      <button\r\n                        onClick={() => enrollBiometric(capability.type as any)}\r\n                        className=\"w-full mt-3 px-3 py-2 bg-orange-500 text-white text-sm rounded-lg hover:bg-orange-600 transition-colors\"\r\n                      >\r\n                        Enroll\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </motion.div>\r\n\r\n            {/* Current Enrollments */}\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: 0.1 }}\r\n              className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n            >\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                Current Enrollments\r\n              </h3>\r\n              <div className=\"space-y-3\">\r\n                {enrollments.map((enrollment) => (\r\n                  <div key={enrollment.id} className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      {getBiometricIcon(enrollment.type)}\r\n                      <div>\r\n                        <h4 className=\"font-medium text-gray-900 dark:text-white capitalize\">\r\n                          {enrollment.type.replace('_', ' ')}\r\n                        </h4>\r\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                          Enrolled: {enrollment.enrolledAt.toLocaleDateString()}\r\n                        </p>\r\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                          Quality: {(enrollment.quality * 100).toFixed(0)}%\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className=\"px-2 py-1 bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-300 rounded-full text-xs font-medium\">\r\n                        Active\r\n                      </span>\r\n                      <button\r\n                        onClick={() => deleteEnrollment(enrollment.id)}\r\n                        className=\"text-red-600 hover:text-red-800 text-sm\"\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </motion.div>\r\n\r\n            {/* Biometric Analytics */}\r\n            {biometricAnalytics && (\r\n              <motion.div\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ delay: 0.2 }}\r\n                className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n              >\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                  Biometric Analytics\r\n                </h3>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                      {biometricAnalytics.totalAttempts}\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">Total Attempts</div>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                      {(biometricAnalytics.successRate * 100).toFixed(1)}%\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">Success Rate</div>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                      {biometricAnalytics.averageResponseTime.toFixed(0)}ms\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">Avg Response Time</div>\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'fraud' && (\r\n          <div className=\"space-y-6\">\r\n            {/* Fraud Detection Overview */}\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n            >\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                Fraud Detection Overview\r\n              </h3>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                    {fraudAnalytics?.totalTransactions || 0}\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">Total Transactions</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                    {fraudAnalytics?.flaggedTransactions || 0}\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">Flagged</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                    {fraudAnalytics ? `${(fraudAnalytics.detectionRate * 100).toFixed(1)}%` : '0%'}\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">Detection Rate</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                    {fraudAnalytics ? `${(fraudAnalytics.accuracy * 100).toFixed(1)}%` : '0%'}\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">Accuracy</div>\r\n                </div>\r\n              </div>\r\n            </motion.div>\r\n\r\n            {/* Active Alerts */}\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: 0.1 }}\r\n              className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n            >\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                Active Fraud Alerts\r\n              </h3>\r\n              <div className=\"space-y-3\">\r\n                {fraudAlerts.filter(alert => alert.status === 'active').map((alert) => (\r\n                  <div key={alert.id} className=\"p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\r\n                    <div className=\"flex items-start justify-between mb-2\">\r\n                      <div>\r\n                        <h4 className=\"font-medium text-gray-900 dark:text-white\">{alert.title}</h4>\r\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">{alert.description}</p>\r\n                      </div>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(alert.severity)}`}>\r\n                          {alert.severity.toUpperCase()}\r\n                        </span>\r\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRiskLevelColor(alert.riskScore >= 80 ? 'critical' : alert.riskScore >= 60 ? 'high' : 'medium')}`}>\r\n                          {alert.riskScore.toFixed(0)}%\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-xs text-gray-500 dark:text-gray-500\">\r\n                        {alert.timestamp.toLocaleString()}\r\n                      </span>\r\n                      <button\r\n                        onClick={() => resolveAlert(alert.id)}\r\n                        className=\"px-3 py-1 bg-orange-500 text-white text-xs rounded-lg hover:bg-orange-600 transition-colors\"\r\n                      >\r\n                        Resolve\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </motion.div>\r\n\r\n            {/* Detection Patterns */}\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ delay: 0.2 }}\r\n              className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n            >\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                Detection Patterns\r\n              </h3>\r\n              <div className=\"space-y-3\">\r\n                {patterns.map((pattern) => (\r\n                  <div key={pattern.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                    <div>\r\n                      <h4 className=\"font-medium text-gray-900 dark:text-white\">{pattern.name}</h4>\r\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">{pattern.description}</p>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRiskLevelColor(pattern.riskLevel)}`}>\r\n                        {pattern.riskLevel.toUpperCase()}\r\n                      </span>\r\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                        {pattern.frequency} detections\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </motion.div>\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'settings' && (\r\n          <div className=\"space-y-6\">\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\r\n            >\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                Security Settings\r\n              </h3>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <h4 className=\"font-medium text-gray-900 dark:text-white\">Biometric Authentication</h4>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                      Enable biometric authentication for enhanced security\r\n                    </p>\r\n                  </div>\r\n                  <button\r\n                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                      biometricSettings?.enabled ? 'bg-orange-500' : 'bg-gray-300 dark:bg-gray-600'\r\n                    }`}\r\n                  >\r\n                    <span\r\n                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                        biometricSettings?.enabled ? 'translate-x-6' : 'translate-x-1'\r\n                      }`}\r\n                    />\r\n                  </button>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <h4 className=\"font-medium text-gray-900 dark:text-white\">Require Biometric for Payments</h4>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                      Require biometric authentication for all payment transactions\r\n                    </p>\r\n                  </div>\r\n                  <button\r\n                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                      biometricSettings?.requireBiometricForPayments ? 'bg-orange-500' : 'bg-gray-300 dark:bg-gray-600'\r\n                    }`}\r\n                  >\r\n                    <span\r\n                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                        biometricSettings?.requireBiometricForPayments ? 'translate-x-6' : 'translate-x-1'\r\n                      }`}\r\n                    />\r\n                  </button>\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <h4 className=\"font-medium text-gray-900 dark:text-white\">Auto Lock</h4>\r\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                      Automatically lock the app after period of inactivity\r\n                    </p>\r\n                  </div>\r\n                  <button\r\n                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\r\n                      biometricSettings?.autoLock ? 'bg-orange-500' : 'bg-gray-300 dark:bg-gray-600'\r\n                    }`}\r\n                  >\r\n                    <span\r\n                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\r\n                        biometricSettings?.autoLock ? 'translate-x-6' : 'translate-x-1'\r\n                      }`}\r\n                    />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </motion.div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnhancedSecurityDashboard;\r\n","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport EnhancedSecurityDashboard from '../components/EnhancedSecurityDashboard';\r\nimport { ShieldCheckIcon } from '@heroicons/react/24/outline';\r\n\r\nconst EnhancedSecurity: React.FC = () => {\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.6 }}\r\n      className=\"max-w-7xl mx-auto\"\r\n    >\r\n      <EnhancedSecurityDashboard />\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default EnhancedSecurity;\r\n"],"names":["FingerPrintIcon","_ref","svgRef","title","titleId","props","_objectWithoutProperties","_excluded","React","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","FaceSmileIcon","MicrophoneIcon","biometricAuthService","constructor","capabilities","enrollments","challenges","settings","analytics","totalAttempts","successfulAttempts","failedAttempts","successRate","averageResponseTime","typeBreakdown","fingerprint","attempts","face","voice","iris","palm","deviceBreakdown","timeBreakdown","this","initializeCapabilities","type","available","isFingerprintAvailable","enrolled","confidence","errorRate","isFaceRecognitionAvailable","isVoiceRecognitionAvailable","navigator","credentials","window","PublicKeyCredential","mediaDevices","getUserMedia","SpeechRecognition","webkitSpeechRecognition","initializeUser","userId","defaultSettings","enabled","fallbackToPassword","requireBiometricForPayments","requireBiometricForSensitiveActions","allowedTypes","qualityThreshold","maxRetries","sessionTimeout","autoLock","autoLockTimeout","getCapabilities","filter","cap","enrollBiometric","biometricData","Error","capability","find","concat","includes","template","createBiometricTemplate","quality","assessBiometricQuality","toFixed","enrollment","generateId","enrolledAt","Date","isActive","metadata","deviceId","getDeviceId","os","getOS","browser","getBrowser","location","getLocation","push","authenticateBiometric","startTime","now","e","matchBiometric","success","updateAnalytics","lastUsed","createBiometricChallenge","challenge","generateChallenge","expiresAt","maxAttempts","status","createdAt","verifyBiometricChallenge","challengeId","c","result","getUserEnrollments","updateSettings","_objectSpread","getAnalytics","deleteEnrollment","enrollmentId","hasOtherEnrollments","some","data","Promise","resolve","setTimeout","Math","random","toString","substring","substr","localStorage","getItem","userAgent","response","fetch","json","city","region","country","_unused","responseTime","currentSuccessRate","enhancedFraudDetectionService","patterns","rules","deviceFingerprints","Map","alerts","totalTransactions","flaggedTransactions","falsePositives","truePositives","detectionRate","accuracy","averageRiskScore","topRiskFactors","patternBreakdown","locationBreakdown","initializePatterns","initializeRules","name","description","pattern","riskLevel","frequency","lastDetected","falsePositiveRate","condition","weight","threshold","isEnabled","triggerCount","assessTransactionRisk","context","updateDeviceFingerprint","device","factors","calculateRiskFactors","riskScore","calculateRiskScore","getRiskLevel","recommendedAction","getRecommendedAction","createFraudAlert","processingTime","transactionId","calculateConfidence","verificationRequired","estimatedLoss","estimatePotentialLoss","amount","userHistory","maxAmount","impact","min","category","evidence","recentTransactions","getRecentTransactions","length","count","timeWindow","frequentRecipients","recipient","isNew","deviceRiskScore","hour","timestamp","getHours","isUnusual","patternFactors","checkPatterns","patternScore","triggeredRules","rule","ruleScore","evaluateRule","lastTriggered","score","then","t","totalWeight","reduce","sum","factor","weightedScore","avgWeight","avgImpact","existing","get","lastSeen","calculateDeviceRiskScore","set","hardware","cores","memory","network","connectionType","behavior","mouseMovement","a","b","alert","getAlertType","severity","getAlertTitle","getAlertDescription","autoResolved","categories","map","f","topFactor","max","hours","forEach","getAlerts","getPatterns","getRules","updatePattern","patternId","updates","p","updateRule","ruleId","r","resolveAlert","alertId","resolution","EnhancedSecurityDashboard","user","useAuth","activeTab","setActiveTab","useState","setCapabilities","setEnrollments","biometricSettings","setBiometricSettings","biometricAnalytics","setBiometricAnalytics","fraudAlerts","setFraudAlerts","fraudAnalytics","setFraudAnalytics","setPatterns","setRules","loading","setLoading","loadData","useCallback","async","caps","enrolls","bioAnalytics","fraudAnalyticsData","patternsData","rulesData","error","console","useEffect","getBiometricIcon","_jsx","className","EyeIcon","DevicePhoneMobileIcon","ShieldCheckIcon","getSeverityColor","getRiskLevelColor","level","resolvedBy","resolvedAt","action","notes","prev","children","_jsxs","icon","ChartBarIcon","ExclamationTriangleIcon","CogIcon","tab","Icon","onClick","motion","div","initial","opacity","y","animate","transition","delay","slice","toUpperCase","replace","mockData","toLocaleDateString","toLocaleString","EnhancedSecurity","duration"],"sourceRoot":""}