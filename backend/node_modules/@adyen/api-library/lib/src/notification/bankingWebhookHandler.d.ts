import { configurationWebhooks, acsWebhooks, reportWebhooks, transferWebhooks, transactionWebhooks, negativeBalanceWarningWebhooks, balanceWebhooks } from "../typings";
/**
 * DEPRECATED
 *
 * Centralised handler for de-serialising all (Banking) webhook payloads.
 *
 * @deprecated Each webhook provides its own handler, for example use AcsWebhooksHandler to process AcsWebhooks events
 * Use the specific WebhookHandler implementation: AcsWebhooksHandler, ReportWebhooksHandler, ConfigurationWebhooksHandler,
 * TransferWebhooksHandler, TransactionWebhooksHandler, etc..
 */
declare class BankingWebhookHandler {
    private readonly payload;
    /**
     * Constructor
     * @deprecated Use specific webhook handlers instead.
     *
     * @param jsonPayload
     */
    constructor(jsonPayload: string);
    /**
     * Return generic webhook type
     * @deprecated Use specific webhook handlers instead.
     *
     * @param jsonPayload
     */
    getGenericWebhook(): acsWebhooks.AuthenticationNotificationRequest | acsWebhooks.RelayedAuthenticationRequest | balanceWebhooks.BalanceAccountBalanceNotificationRequest | configurationWebhooks.AccountHolderNotificationRequest | configurationWebhooks.BalanceAccountNotificationRequest | configurationWebhooks.PaymentNotificationRequest | configurationWebhooks.SweepConfigurationNotificationRequest | configurationWebhooks.CardOrderNotificationRequest | negativeBalanceWarningWebhooks.NegativeBalanceCompensationWarningNotificationRequest | reportWebhooks.ReportNotificationRequest | transferWebhooks.TransferNotificationRequest | transactionWebhooks.TransactionNotificationRequestV4;
    /**
     * @deprecated Use AcsWebhooksHandler instead.
     */
    getAuthenticationNotificationRequest(): acsWebhooks.AuthenticationNotificationRequest;
    /**
     * @deprecated Use AcsWebhooksHandler instead.
     */
    getRelayedAuthenticationRequest(): acsWebhooks.RelayedAuthenticationRequest;
    /**
     * @deprecated Use BalanceWebhooksHandler instead.
     */
    getBalanceAccountBalanceNotificationRequest(): balanceWebhooks.BalanceAccountBalanceNotificationRequest;
    /**
     * @deprecated Use ConfigurationWebhooksHandler instead.
     */
    getAccountHolderNotificationRequest(): configurationWebhooks.AccountHolderNotificationRequest;
    /**
     * @deprecated Use ConfigurationWebhooksHandler instead.
     */
    getCardOrderNotificationRequest(): configurationWebhooks.CardOrderNotificationRequest;
    /**
     * @deprecated Use ConfigurationWebhooksHandler instead.
     */
    getPaymentNotificationRequest(): configurationWebhooks.PaymentNotificationRequest;
    /**
     * @deprecated Use ConfigurationWebhooksHandler instead.
     */
    getSweepConfigurationNotificationRequest(): configurationWebhooks.SweepConfigurationNotificationRequest;
    /**
     * @deprecated Use NegativeBalanceWarningWebhooksHandler instead.
     */
    getNegativeBalanceCompensationWarningNotificationRequest(): negativeBalanceWarningWebhooks.NegativeBalanceCompensationWarningNotificationRequest;
    /**
     * @deprecated Use ReportWebhooksHandler instead.
     */
    getReportNotificationRequest(): reportWebhooks.ReportNotificationRequest;
    /**
     * @deprecated Use TransferWebhooksHandler instead.
     */
    getTransferNotificationRequest(): transferWebhooks.TransferNotificationRequest;
    /**
     * @deprecated Use TransactionWebhooksHandler instead.
     */
    getTransactionNotificationRequest(): transactionWebhooks.TransactionNotificationRequestV4;
    /**
     * @deprecated Use BalanceWebhooksHandler instead.
     */
    BalanceAccountBalanceNotificationRequest(): balanceWebhooks.BalanceAccountBalanceNotificationRequest;
}
export default BankingWebhookHandler;
