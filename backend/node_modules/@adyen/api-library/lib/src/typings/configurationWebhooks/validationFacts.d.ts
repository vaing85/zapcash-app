export declare class ValidationFacts {
    /**
    * The reason for the `result` of the validations.  This field is only sent for `validationFacts.type` **walletValidation**, when `validationFacts.result` is **invalid**.
    */
    "reasons"?: Array<string>;
    /**
    * The evaluation result of the validation facts.  Possible values: **valid**, **invalid**, **notValidated**, **notApplicable**.
    */
    "result"?: ValidationFacts.ResultEnum;
    /**
    * The type of the validation fact.
    */
    "type"?: string;
    static readonly discriminator: string | undefined;
    static readonly mapping: {
        [index: string]: string;
    } | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
export declare namespace ValidationFacts {
    enum ResultEnum {
        Invalid = "invalid",
        NotApplicable = "notApplicable",
        NotValidated = "notValidated",
        Valid = "valid"
    }
}
