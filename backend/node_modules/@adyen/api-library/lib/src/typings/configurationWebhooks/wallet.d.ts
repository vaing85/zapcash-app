import { Device } from "./device";
export declare class Wallet {
    /**
    * The confidence score of the wallet account, calculated by the wallet provider.  A high score means that account is considered trustworthy. A low score means that the account is considered suspicious.  Possible values: **1** to **5**.
    */
    "accountScore"?: string;
    "device"?: Device | null;
    /**
    * The confidence score of the device, calculated by the wallet provider.  A high score means that device is considered trustworthy. A low score means that the device is considered suspicious.  Possible values: **1** to **5**.
    */
    "deviceScore"?: string;
    /**
    * The method used for provisioning the network token.  Possible values: **push**, **manual**, **cof**, **unknown**.
    */
    "provisioningMethod"?: string;
    /**
    * A list of risk indicators triggered at the time of provisioning the network token.  Some example values of risk indicators are:  * **accountTooNewSinceLaunch** * **tooManyRecentAttempts** * **lowDeviceScore** * **lowAccountScore**
    */
    "recommendationReasons"?: Array<Wallet.RecommendationReasonsEnum>;
    /**
    * The type of wallet that the network token is associated with.  Possible values: **applePay**, **googlePay**, **garminPay**.
    *
    * @deprecated since Configuration webhooks v2
    * Use name of the `tokenRequestor` instead.
    */
    "type"?: string;
    static readonly discriminator: string | undefined;
    static readonly mapping: {
        [index: string]: string;
    } | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
export declare namespace Wallet {
    enum RecommendationReasonsEnum {
        AccountCardTooNew = "accountCardTooNew",
        AccountHighRisk = "accountHighRisk",
        AccountRecentlyChanged = "accountRecentlyChanged",
        AccountTooNew = "accountTooNew",
        AccountTooNewSinceLaunch = "accountTooNewSinceLaunch",
        CardholderPanAssociatedToAccountWithinThresholdDays = "cardholderPanAssociatedToAccountWithinThresholdDays",
        ChangesMadeToAccountDataWithinThresholdDays = "changesMadeToAccountDataWithinThresholdDays",
        DeviceProvisioningLocationOutsideOfCardholdersWalletAccountHomeCountry = "deviceProvisioningLocationOutsideOfCardholdersWalletAccountHomeCountry",
        DeviceRecentlyLost = "deviceRecentlyLost",
        EncryptedPaymentInstrumentDataIsBeingPushedByTheIssuerToTheSameDeviceThatIssuerApplicationAuthenticatedButWithSuccessfulUpfrontAuthentication = "encryptedPaymentInstrumentDataIsBeingPushedByTheIssuerToTheSameDeviceThatIssuerApplicationAuthenticatedButWithSuccessfulUpfrontAuthentication",
        EncryptedPaymentInstrumentDataIsBeingPushedByTheIssuerToTheSameDeviceThatIssuerApplicationAuthenticatedButWithoutAnyUpfrontAuthentication = "encryptedPaymentInstrumentDataIsBeingPushedByTheIssuerToTheSameDeviceThatIssuerApplicationAuthenticatedButWithoutAnyUpfrontAuthentication",
        EncryptedPaymentInstrumentDataIsPushedToADifferentDeviceThanTheOneThatIssuerApplicationAuthenticated = "encryptedPaymentInstrumentDataIsPushedToADifferentDeviceThanTheOneThatIssuerApplicationAuthenticated",
        EncryptedPaymentInstrumentDataIsPushedToADifferentUserThanTheCardHolder = "encryptedPaymentInstrumentDataIsPushedToADifferentUserThanTheCardHolder",
        HasSuspendedTokens = "hasSuspendedTokens",
        InactiveAccount = "inactiveAccount",
        IssuerDeferredIdvDecision = "issuerDeferredIDVDecision",
        IssuerEncryptedPaymentInstrumentDataExpired = "issuerEncryptedPaymentInstrumentDataExpired",
        LowAccountScore = "lowAccountScore",
        LowDeviceScore = "lowDeviceScore",
        LowPhoneNumberScore = "lowPhoneNumberScore",
        NumberOfActiveTokensGreaterThanThreshold = "numberOfActiveTokensGreaterThanThreshold",
        NumberOfActiveTokensOnAllDevicesIsGreaterThanThreshold = "numberOfActiveTokensOnAllDevicesIsGreaterThanThreshold",
        NumberOfDaysSinceDeviceWasLastReportedLostIsLessThanThresholdDays = "numberOfDaysSinceDeviceWasLastReportedLostIsLessThanThresholdDays",
        NumberOfDevicesWithSameUseridWithTokenIsGreaterThanThreshold = "numberOfDevicesWithSameUseridWithTokenIsGreaterThanThreshold",
        NumberOfTransactionsInLast12MonthsLessThanThresholdNumber = "numberOfTransactionsInLast12MonthsLessThanThresholdNumber",
        OutSideHomeTerritory = "outSideHomeTerritory",
        SuspendedCardsInTheWalletAccountIsGreaterThanThreshold = "suspendedCardsInTheWALLETAccountIsGreaterThanThreshold",
        SuspiciousActivity = "suspiciousActivity",
        TheNumberOfProvisioningAttemptsAcrossAllCardsOnThisDeviceInTheLast24HoursExceedsTheThreshold = "theNumberOfProvisioningAttemptsAcrossAllCardsOnThisDeviceInTheLast24HoursExceedsTheThreshold",
        TheWalletAccountIntoWhichTheCardIsBeingProvisionedContainDistinctNamesGreaterThanThreshold = "theWALLETAccountIntoWhichTheCardIsBeingProvisionedContainDistinctNamesGreaterThanThreshold",
        ThisAccountHasNotHadActivityWithinThresholdPeriod = "thisAccountHasNotHadActivityWithinThresholdPeriod",
        TooManyDifferentCardholders = "tooManyDifferentCardholders",
        TooManyRecentAttempts = "tooManyRecentAttempts",
        TooManyRecentTokens = "tooManyRecentTokens",
        UnableToAssess = "unableToAssess",
        Unknown = "unknown",
        UserAccountWasCreatedWithinThresholdDays = "userAccountWasCreatedWithinThresholdDays",
        UserDeviceReceivingEncryptedPaymentInstrumentDataIsDifferentThanTheOneThatIsProvisioningTheToken = "userDeviceReceivingEncryptedPaymentInstrumentDataIsDifferentThanTheOneThatIsProvisioningTheToken",
        UsersAccountOnDeviceLessThanThresholdDays = "usersAccountOnDeviceLessThanThresholdDays",
        WalletAccountCreatedWithinThresholdDays = "walletAccountCreatedWithinThresholdDays",
        WalletAccountHolderNameOnFileDoesNotMatchCardholderEnteredName = "walletAccountHolderNameOnFileDoesNotMatchCardholderEnteredName"
    }
}
