import { NetworkTokenRequestor } from "./networkTokenRequestor";
import { NetworkTokenTransactionRulesResult } from "./networkTokenTransactionRulesResult";
import { TokenAuthentication } from "./tokenAuthentication";
import { ValidationFacts } from "./validationFacts";
import { Wallet } from "./wallet";
export declare class NetworkTokenNotificationDataV2 {
    "authentication"?: TokenAuthentication | null;
    /**
    * Specifies whether the authentication process was triggered during token provisioning.
    */
    "authenticationApplied"?: boolean;
    /**
    * The unique identifier of the balance platform.
    */
    "balancePlatform"?: string;
    /**
    * The decision about the network token provisioning.  Possible values: **approved**, **declined**, **requiresAuthentication**.
    */
    "decision"?: string;
    /**
    * The unique identifier of the network token.
    */
    "id"?: string;
    /**
    * The unique identifier of the payment instrument to which the network token is associated.
    */
    "paymentInstrumentId"?: string;
    /**
    * The status of the network token.
    */
    "status"?: string;
    /**
    * The last four digits of the network token. Use this value to help your user to identify their network token.
    */
    "tokenLastFour"?: string;
    "tokenRequestor"?: NetworkTokenRequestor | null;
    "transactionRulesResult"?: NetworkTokenTransactionRulesResult | null;
    /**
    * The type of network token.  Possible values: **wallet**, **cof**.
    */
    "type"?: string;
    /**
    * The rules used to validate the request for provisioning the network token.
    */
    "validationFacts"?: Array<ValidationFacts>;
    "wallet"?: Wallet | null;
    static readonly discriminator: string | undefined;
    static readonly mapping: {
        [index: string]: string;
    } | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
