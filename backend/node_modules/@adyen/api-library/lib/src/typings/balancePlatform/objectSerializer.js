"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("./models"), exports);
const aULocalAccountIdentification_1 = require("./aULocalAccountIdentification");
const accountHolder_1 = require("./accountHolder");
const accountHolderCapability_1 = require("./accountHolderCapability");
const accountHolderInfo_1 = require("./accountHolderInfo");
const accountHolderUpdateRequest_1 = require("./accountHolderUpdateRequest");
const accountSupportingEntityCapability_1 = require("./accountSupportingEntityCapability");
const activeNetworkTokensRestriction_1 = require("./activeNetworkTokensRestriction");
const additionalBankIdentification_1 = require("./additionalBankIdentification");
const additionalBankIdentificationRequirement_1 = require("./additionalBankIdentificationRequirement");
const address_1 = require("./address");
const addressRequirement_1 = require("./addressRequirement");
const amount_1 = require("./amount");
const amountMinMaxRequirement_1 = require("./amountMinMaxRequirement");
const amountNonZeroDecimalsRequirement_1 = require("./amountNonZeroDecimalsRequirement");
const associationDelegatedAuthenticationData_1 = require("./associationDelegatedAuthenticationData");
const associationFinaliseRequest_1 = require("./associationFinaliseRequest");
const associationFinaliseResponse_1 = require("./associationFinaliseResponse");
const associationInitiateRequest_1 = require("./associationInitiateRequest");
const associationInitiateResponse_1 = require("./associationInitiateResponse");
const authentication_1 = require("./authentication");
const authorisedCardUsers_1 = require("./authorisedCardUsers");
const bRLocalAccountIdentification_1 = require("./bRLocalAccountIdentification");
const balance_1 = require("./balance");
const balanceAccount_1 = require("./balanceAccount");
const balanceAccountBase_1 = require("./balanceAccountBase");
const balanceAccountInfo_1 = require("./balanceAccountInfo");
const balanceAccountUpdateRequest_1 = require("./balanceAccountUpdateRequest");
const balancePlatform_1 = require("./balancePlatform");
const balanceSweepConfigurationsResponse_1 = require("./balanceSweepConfigurationsResponse");
const balanceWebhookSetting_1 = require("./balanceWebhookSetting");
const balanceWebhookSettingInfo_1 = require("./balanceWebhookSettingInfo");
const balanceWebhookSettingInfoUpdate_1 = require("./balanceWebhookSettingInfoUpdate");
const bankAccount_1 = require("./bankAccount");
const bankAccountAccountIdentification_1 = require("./bankAccountAccountIdentification");
const bankAccountDetails_1 = require("./bankAccountDetails");
const bankAccountIdentificationTypeRequirement_1 = require("./bankAccountIdentificationTypeRequirement");
const bankAccountIdentificationValidationRequest_1 = require("./bankAccountIdentificationValidationRequest");
const bankAccountIdentificationValidationRequestAccountIdentification_1 = require("./bankAccountIdentificationValidationRequestAccountIdentification");
const bankAccountModel_1 = require("./bankAccountModel");
const bankIdentification_1 = require("./bankIdentification");
const brandVariantsRestriction_1 = require("./brandVariantsRestriction");
const bulkAddress_1 = require("./bulkAddress");
const cALocalAccountIdentification_1 = require("./cALocalAccountIdentification");
const cZLocalAccountIdentification_1 = require("./cZLocalAccountIdentification");
const capabilityProblem_1 = require("./capabilityProblem");
const capabilityProblemEntity_1 = require("./capabilityProblemEntity");
const capabilityProblemEntityRecursive_1 = require("./capabilityProblemEntityRecursive");
const capabilitySettings_1 = require("./capabilitySettings");
const capitalBalance_1 = require("./capitalBalance");
const capitalGrantAccount_1 = require("./capitalGrantAccount");
const card_1 = require("./card");
const cardConfiguration_1 = require("./cardConfiguration");
const cardInfo_1 = require("./cardInfo");
const cardOrder_1 = require("./cardOrder");
const cardOrderItem_1 = require("./cardOrderItem");
const cardOrderItemDeliveryStatus_1 = require("./cardOrderItemDeliveryStatus");
const condition_1 = require("./condition");
const contactDetails_1 = require("./contactDetails");
const counterparty_1 = require("./counterparty");
const counterpartyBankRestriction_1 = require("./counterpartyBankRestriction");
const counterpartyTypesRestriction_1 = require("./counterpartyTypesRestriction");
const countriesRestriction_1 = require("./countriesRestriction");
const createSweepConfigurationV2_1 = require("./createSweepConfigurationV2");
const dKLocalAccountIdentification_1 = require("./dKLocalAccountIdentification");
const dayOfWeekRestriction_1 = require("./dayOfWeekRestriction");
const defaultErrorResponseEntity_1 = require("./defaultErrorResponseEntity");
const delegatedAuthenticationData_1 = require("./delegatedAuthenticationData");
const deliveryAddress_1 = require("./deliveryAddress");
const deliveryContact_1 = require("./deliveryContact");
const device_1 = require("./device");
const deviceInfo_1 = require("./deviceInfo");
const differentCurrenciesRestriction_1 = require("./differentCurrenciesRestriction");
const duration_1 = require("./duration");
const entryModesRestriction_1 = require("./entryModesRestriction");
const expiry_1 = require("./expiry");
const fee_1 = require("./fee");
const getNetworkTokenResponse_1 = require("./getNetworkTokenResponse");
const getTaxFormResponse_1 = require("./getTaxFormResponse");
const grantLimit_1 = require("./grantLimit");
const grantOffer_1 = require("./grantOffer");
const grantOffers_1 = require("./grantOffers");
const hKLocalAccountIdentification_1 = require("./hKLocalAccountIdentification");
const hULocalAccountIdentification_1 = require("./hULocalAccountIdentification");
const href_1 = require("./href");
const ibanAccountIdentification_1 = require("./ibanAccountIdentification");
const ibanAccountIdentificationRequirement_1 = require("./ibanAccountIdentificationRequirement");
const internationalTransactionRestriction_1 = require("./internationalTransactionRestriction");
const invalidField_1 = require("./invalidField");
const link_1 = require("./link");
const listNetworkTokensResponse_1 = require("./listNetworkTokensResponse");
const matchingTransactionsRestriction_1 = require("./matchingTransactionsRestriction");
const matchingValuesRestriction_1 = require("./matchingValuesRestriction");
const mccsRestriction_1 = require("./mccsRestriction");
const merchantAcquirerPair_1 = require("./merchantAcquirerPair");
const merchantNamesRestriction_1 = require("./merchantNamesRestriction");
const merchantsRestriction_1 = require("./merchantsRestriction");
const nOLocalAccountIdentification_1 = require("./nOLocalAccountIdentification");
const nZLocalAccountIdentification_1 = require("./nZLocalAccountIdentification");
const name_1 = require("./name");
const networkToken_1 = require("./networkToken");
const networkTokenActivationDataRequest_1 = require("./networkTokenActivationDataRequest");
const networkTokenActivationDataResponse_1 = require("./networkTokenActivationDataResponse");
const networkTokenRequestor_1 = require("./networkTokenRequestor");
const numberAndBicAccountIdentification_1 = require("./numberAndBicAccountIdentification");
const pLLocalAccountIdentification_1 = require("./pLLocalAccountIdentification");
const paginatedAccountHoldersResponse_1 = require("./paginatedAccountHoldersResponse");
const paginatedBalanceAccountsResponse_1 = require("./paginatedBalanceAccountsResponse");
const paginatedGetCardOrderItemResponse_1 = require("./paginatedGetCardOrderItemResponse");
const paginatedGetCardOrderResponse_1 = require("./paginatedGetCardOrderResponse");
const paginatedPaymentInstrumentsResponse_1 = require("./paginatedPaymentInstrumentsResponse");
const paymentInstrument_1 = require("./paymentInstrument");
const paymentInstrumentAdditionalBankAccountIdentificationsInner_1 = require("./paymentInstrumentAdditionalBankAccountIdentificationsInner");
const paymentInstrumentGroup_1 = require("./paymentInstrumentGroup");
const paymentInstrumentGroupInfo_1 = require("./paymentInstrumentGroupInfo");
const paymentInstrumentInfo_1 = require("./paymentInstrumentInfo");
const paymentInstrumentRequirement_1 = require("./paymentInstrumentRequirement");
const paymentInstrumentRevealInfo_1 = require("./paymentInstrumentRevealInfo");
const paymentInstrumentRevealRequest_1 = require("./paymentInstrumentRevealRequest");
const paymentInstrumentRevealResponse_1 = require("./paymentInstrumentRevealResponse");
const paymentInstrumentUpdateRequest_1 = require("./paymentInstrumentUpdateRequest");
const phone_1 = require("./phone");
const phoneNumber_1 = require("./phoneNumber");
const pinChangeRequest_1 = require("./pinChangeRequest");
const pinChangeResponse_1 = require("./pinChangeResponse");
const platformPaymentConfiguration_1 = require("./platformPaymentConfiguration");
const processingTypesRestriction_1 = require("./processingTypesRestriction");
const publicKeyResponse_1 = require("./publicKeyResponse");
const registerSCAFinalResponse_1 = require("./registerSCAFinalResponse");
const registerSCARequest_1 = require("./registerSCARequest");
const registerSCAResponse_1 = require("./registerSCAResponse");
const remediatingAction_1 = require("./remediatingAction");
const repayment_1 = require("./repayment");
const repaymentTerm_1 = require("./repaymentTerm");
const restServiceError_1 = require("./restServiceError");
const revealPinRequest_1 = require("./revealPinRequest");
const revealPinResponse_1 = require("./revealPinResponse");
const riskScores_1 = require("./riskScores");
const riskScoresRestriction_1 = require("./riskScoresRestriction");
const sELocalAccountIdentification_1 = require("./sELocalAccountIdentification");
const sGLocalAccountIdentification_1 = require("./sGLocalAccountIdentification");
const sameAmountRestriction_1 = require("./sameAmountRestriction");
const sameCounterpartyRestriction_1 = require("./sameCounterpartyRestriction");
const searchRegisteredDevicesResponse_1 = require("./searchRegisteredDevicesResponse");
const settingType_1 = require("./settingType");
const sourceAccountTypesRestriction_1 = require("./sourceAccountTypesRestriction");
const stringMatch_1 = require("./stringMatch");
const sweepConfigurationV2_1 = require("./sweepConfigurationV2");
const sweepCounterparty_1 = require("./sweepCounterparty");
const sweepSchedule_1 = require("./sweepSchedule");
const target_1 = require("./target");
const targetUpdate_1 = require("./targetUpdate");
const thresholdRepayment_1 = require("./thresholdRepayment");
const timeOfDay_1 = require("./timeOfDay");
const timeOfDayRestriction_1 = require("./timeOfDayRestriction");
const tokenRequestorsRestriction_1 = require("./tokenRequestorsRestriction");
const totalAmountRestriction_1 = require("./totalAmountRestriction");
const transactionRule_1 = require("./transactionRule");
const transactionRuleEntityKey_1 = require("./transactionRuleEntityKey");
const transactionRuleInfo_1 = require("./transactionRuleInfo");
const transactionRuleInterval_1 = require("./transactionRuleInterval");
const transactionRuleResponse_1 = require("./transactionRuleResponse");
const transactionRuleRestrictions_1 = require("./transactionRuleRestrictions");
const transactionRulesResponse_1 = require("./transactionRulesResponse");
const transferRoute_1 = require("./transferRoute");
const transferRouteRequest_1 = require("./transferRouteRequest");
const transferRouteRequirementsInner_1 = require("./transferRouteRequirementsInner");
const transferRouteResponse_1 = require("./transferRouteResponse");
const uKLocalAccountIdentification_1 = require("./uKLocalAccountIdentification");
const uSInstantPayoutAddressRequirement_1 = require("./uSInstantPayoutAddressRequirement");
const uSInternationalAchAddressRequirement_1 = require("./uSInternationalAchAddressRequirement");
const uSInternationalAchPriorityRequirement_1 = require("./uSInternationalAchPriorityRequirement");
const uSLocalAccountIdentification_1 = require("./uSLocalAccountIdentification");
const updateNetworkTokenRequest_1 = require("./updateNetworkTokenRequest");
const updatePaymentInstrument_1 = require("./updatePaymentInstrument");
const updateSweepConfigurationV2_1 = require("./updateSweepConfigurationV2");
const verificationDeadline_1 = require("./verificationDeadline");
const verificationError_1 = require("./verificationError");
const verificationErrorRecursive_1 = require("./verificationErrorRecursive");
const walletProviderAccountScoreRestriction_1 = require("./walletProviderAccountScoreRestriction");
const walletProviderDeviceScore_1 = require("./walletProviderDeviceScore");
const walletProviderDeviceType_1 = require("./walletProviderDeviceType");
const webhookSetting_1 = require("./webhookSetting");
const webhookSettings_1 = require("./webhookSettings");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = new Set([
    "AULocalAccountIdentification.TypeEnum",
    "AccountHolder.StatusEnum",
    "AccountHolderCapability.AllowedLevelEnum",
    "AccountHolderCapability.RequestedLevelEnum",
    "AccountHolderCapability.VerificationStatusEnum",
    "AccountHolderUpdateRequest.StatusEnum",
    "AccountSupportingEntityCapability.AllowedLevelEnum",
    "AccountSupportingEntityCapability.RequestedLevelEnum",
    "AccountSupportingEntityCapability.VerificationStatusEnum",
    "AdditionalBankIdentification.TypeEnum",
    "AdditionalBankIdentificationRequirement.AdditionalBankIdentificationTypeEnum",
    "AdditionalBankIdentificationRequirement.TypeEnum",
    "AddressRequirement.RequiredAddressFieldsEnum",
    "AddressRequirement.TypeEnum",
    "AmountMinMaxRequirement.TypeEnum",
    "AmountNonZeroDecimalsRequirement.TypeEnum",
    "AssociationFinaliseRequest.TypeEnum",
    "AssociationFinaliseResponse.TypeEnum",
    "AssociationInitiateRequest.TypeEnum",
    "BRLocalAccountIdentification.TypeEnum",
    "BalanceAccount.StatusEnum",
    "BalanceAccountBase.StatusEnum",
    "BalanceAccountUpdateRequest.StatusEnum",
    "BalanceWebhookSettingInfo.StatusEnum",
    "BalanceWebhookSettingInfo.TypeEnum",
    "BalanceWebhookSettingInfoUpdate.StatusEnum",
    "BalanceWebhookSettingInfoUpdate.TypeEnum",
    "BankAccountAccountIdentification.TypeEnum",
    "BankAccountAccountIdentification.AccountTypeEnum",
    "BankAccountIdentificationTypeRequirement.BankAccountIdentificationTypesEnum",
    "BankAccountIdentificationTypeRequirement.TypeEnum",
    "BankAccountIdentificationValidationRequestAccountIdentification.TypeEnum",
    "BankAccountIdentificationValidationRequestAccountIdentification.AccountTypeEnum",
    "BankAccountModel.FormFactorEnum",
    "BankIdentification.IdentificationTypeEnum",
    "CALocalAccountIdentification.AccountTypeEnum",
    "CALocalAccountIdentification.TypeEnum",
    "CZLocalAccountIdentification.TypeEnum",
    "CapabilityProblemEntity.TypeEnum",
    "CapabilityProblemEntityRecursive.TypeEnum",
    "CapabilitySettings.FundingSourceEnum",
    "CapabilitySettings.IntervalEnum",
    "Card.FormFactorEnum",
    "CardInfo.FormFactorEnum",
    "CardOrder.StatusEnum",
    "CardOrderItemDeliveryStatus.StatusEnum",
    "Condition.BalanceTypeEnum",
    "Condition.ConditionTypeEnum",
    "CounterpartyTypesRestriction.ValueEnum",
    "CreateSweepConfigurationV2.CategoryEnum",
    "CreateSweepConfigurationV2.PrioritiesEnum",
    "CreateSweepConfigurationV2.ReasonEnum",
    "CreateSweepConfigurationV2.StatusEnum",
    "CreateSweepConfigurationV2.TypeEnum",
    "DKLocalAccountIdentification.TypeEnum",
    "DayOfWeekRestriction.ValueEnum",
    "Device.TypeEnum",
    "Duration.UnitEnum",
    "EntryModesRestriction.ValueEnum",
    "GetTaxFormResponse.ContentTypeEnum",
    "GrantOffer.ContractTypeEnum",
    "HKLocalAccountIdentification.TypeEnum",
    "HULocalAccountIdentification.TypeEnum",
    "IbanAccountIdentification.TypeEnum",
    "IbanAccountIdentificationRequirement.TypeEnum",
    "MatchingValuesRestriction.ValueEnum",
    "NOLocalAccountIdentification.TypeEnum",
    "NZLocalAccountIdentification.TypeEnum",
    "NetworkToken.StatusEnum",
    "NumberAndBicAccountIdentification.TypeEnum",
    "PLLocalAccountIdentification.TypeEnum",
    "PaymentInstrument.StatusEnum",
    "PaymentInstrument.StatusReasonEnum",
    "PaymentInstrument.TypeEnum",
    "PaymentInstrumentAdditionalBankAccountIdentificationsInner.TypeEnum",
    "PaymentInstrumentInfo.StatusEnum",
    "PaymentInstrumentInfo.StatusReasonEnum",
    "PaymentInstrumentInfo.TypeEnum",
    "PaymentInstrumentRequirement.PaymentInstrumentTypeEnum",
    "PaymentInstrumentRequirement.TypeEnum",
    "PaymentInstrumentUpdateRequest.StatusEnum",
    "PaymentInstrumentUpdateRequest.StatusReasonEnum",
    "Phone.TypeEnum",
    "PhoneNumber.PhoneTypeEnum",
    "PinChangeResponse.StatusEnum",
    "ProcessingTypesRestriction.ValueEnum",
    "SELocalAccountIdentification.TypeEnum",
    "SGLocalAccountIdentification.TypeEnum",
    settingType_1.SettingType.Balance,
    "SourceAccountTypesRestriction.ValueEnum",
    "StringMatch.OperationEnum",
    "SweepConfigurationV2.CategoryEnum",
    "SweepConfigurationV2.PrioritiesEnum",
    "SweepConfigurationV2.ReasonEnum",
    "SweepConfigurationV2.StatusEnum",
    "SweepConfigurationV2.TypeEnum",
    "SweepSchedule.TypeEnum",
    "Target.TypeEnum",
    "TargetUpdate.TypeEnum",
    "TransactionRule.OutcomeTypeEnum",
    "TransactionRule.RequestTypeEnum",
    "TransactionRule.StatusEnum",
    "TransactionRule.TypeEnum",
    "TransactionRuleInfo.OutcomeTypeEnum",
    "TransactionRuleInfo.RequestTypeEnum",
    "TransactionRuleInfo.StatusEnum",
    "TransactionRuleInfo.TypeEnum",
    "TransactionRuleInterval.DayOfWeekEnum",
    "TransactionRuleInterval.TypeEnum",
    "TransferRoute.CategoryEnum",
    "TransferRoute.PriorityEnum",
    "TransferRouteRequest.CategoryEnum",
    "TransferRouteRequest.PrioritiesEnum",
    "TransferRouteRequirementsInner.AdditionalBankIdentificationTypeEnum",
    "TransferRouteRequirementsInner.TypeEnum",
    "TransferRouteRequirementsInner.RequiredAddressFieldsEnum",
    "TransferRouteRequirementsInner.BankAccountIdentificationTypesEnum",
    "TransferRouteRequirementsInner.PaymentInstrumentTypeEnum",
    "UKLocalAccountIdentification.TypeEnum",
    "USInstantPayoutAddressRequirement.TypeEnum",
    "USInternationalAchAddressRequirement.TypeEnum",
    "USInternationalAchPriorityRequirement.TypeEnum",
    "USLocalAccountIdentification.AccountTypeEnum",
    "USLocalAccountIdentification.TypeEnum",
    "UpdateNetworkTokenRequest.StatusEnum",
    "UpdatePaymentInstrument.StatusEnum",
    "UpdatePaymentInstrument.StatusReasonEnum",
    "UpdatePaymentInstrument.TypeEnum",
    "UpdateSweepConfigurationV2.CategoryEnum",
    "UpdateSweepConfigurationV2.PrioritiesEnum",
    "UpdateSweepConfigurationV2.ReasonEnum",
    "UpdateSweepConfigurationV2.StatusEnum",
    "UpdateSweepConfigurationV2.TypeEnum",
    "VerificationDeadline.CapabilitiesEnum",
    "VerificationError.CapabilitiesEnum",
    "VerificationError.TypeEnum",
    "VerificationErrorRecursive.CapabilitiesEnum",
    "VerificationErrorRecursive.TypeEnum",
    "WalletProviderDeviceType.ValueEnum",
]);
let typeMap = {
    "AULocalAccountIdentification": aULocalAccountIdentification_1.AULocalAccountIdentification,
    "AccountHolder": accountHolder_1.AccountHolder,
    "AccountHolderCapability": accountHolderCapability_1.AccountHolderCapability,
    "AccountHolderInfo": accountHolderInfo_1.AccountHolderInfo,
    "AccountHolderUpdateRequest": accountHolderUpdateRequest_1.AccountHolderUpdateRequest,
    "AccountSupportingEntityCapability": accountSupportingEntityCapability_1.AccountSupportingEntityCapability,
    "ActiveNetworkTokensRestriction": activeNetworkTokensRestriction_1.ActiveNetworkTokensRestriction,
    "AdditionalBankIdentification": additionalBankIdentification_1.AdditionalBankIdentification,
    "AdditionalBankIdentificationRequirement": additionalBankIdentificationRequirement_1.AdditionalBankIdentificationRequirement,
    "Address": address_1.Address,
    "AddressRequirement": addressRequirement_1.AddressRequirement,
    "Amount": amount_1.Amount,
    "AmountMinMaxRequirement": amountMinMaxRequirement_1.AmountMinMaxRequirement,
    "AmountNonZeroDecimalsRequirement": amountNonZeroDecimalsRequirement_1.AmountNonZeroDecimalsRequirement,
    "AssociationDelegatedAuthenticationData": associationDelegatedAuthenticationData_1.AssociationDelegatedAuthenticationData,
    "AssociationFinaliseRequest": associationFinaliseRequest_1.AssociationFinaliseRequest,
    "AssociationFinaliseResponse": associationFinaliseResponse_1.AssociationFinaliseResponse,
    "AssociationInitiateRequest": associationInitiateRequest_1.AssociationInitiateRequest,
    "AssociationInitiateResponse": associationInitiateResponse_1.AssociationInitiateResponse,
    "Authentication": authentication_1.Authentication,
    "AuthorisedCardUsers": authorisedCardUsers_1.AuthorisedCardUsers,
    "BRLocalAccountIdentification": bRLocalAccountIdentification_1.BRLocalAccountIdentification,
    "Balance": balance_1.Balance,
    "BalanceAccount": balanceAccount_1.BalanceAccount,
    "BalanceAccountBase": balanceAccountBase_1.BalanceAccountBase,
    "BalanceAccountInfo": balanceAccountInfo_1.BalanceAccountInfo,
    "BalanceAccountUpdateRequest": balanceAccountUpdateRequest_1.BalanceAccountUpdateRequest,
    "BalancePlatform": balancePlatform_1.BalancePlatform,
    "BalanceSweepConfigurationsResponse": balanceSweepConfigurationsResponse_1.BalanceSweepConfigurationsResponse,
    "BalanceWebhookSetting": balanceWebhookSetting_1.BalanceWebhookSetting,
    "BalanceWebhookSettingInfo": balanceWebhookSettingInfo_1.BalanceWebhookSettingInfo,
    "BalanceWebhookSettingInfoUpdate": balanceWebhookSettingInfoUpdate_1.BalanceWebhookSettingInfoUpdate,
    "BankAccount": bankAccount_1.BankAccount,
    "BankAccountAccountIdentification": bankAccountAccountIdentification_1.BankAccountAccountIdentificationClass,
    "BankAccountDetails": bankAccountDetails_1.BankAccountDetails,
    "BankAccountIdentificationTypeRequirement": bankAccountIdentificationTypeRequirement_1.BankAccountIdentificationTypeRequirement,
    "BankAccountIdentificationValidationRequest": bankAccountIdentificationValidationRequest_1.BankAccountIdentificationValidationRequest,
    "BankAccountIdentificationValidationRequestAccountIdentification": bankAccountIdentificationValidationRequestAccountIdentification_1.BankAccountIdentificationValidationRequestAccountIdentificationClass,
    "BankAccountModel": bankAccountModel_1.BankAccountModel,
    "BankIdentification": bankIdentification_1.BankIdentification,
    "BrandVariantsRestriction": brandVariantsRestriction_1.BrandVariantsRestriction,
    "BulkAddress": bulkAddress_1.BulkAddress,
    "CALocalAccountIdentification": cALocalAccountIdentification_1.CALocalAccountIdentification,
    "CZLocalAccountIdentification": cZLocalAccountIdentification_1.CZLocalAccountIdentification,
    "CapabilityProblem": capabilityProblem_1.CapabilityProblem,
    "CapabilityProblemEntity": capabilityProblemEntity_1.CapabilityProblemEntity,
    "CapabilityProblemEntityRecursive": capabilityProblemEntityRecursive_1.CapabilityProblemEntityRecursive,
    "CapabilitySettings": capabilitySettings_1.CapabilitySettings,
    "CapitalBalance": capitalBalance_1.CapitalBalance,
    "CapitalGrantAccount": capitalGrantAccount_1.CapitalGrantAccount,
    "Card": card_1.Card,
    "CardConfiguration": cardConfiguration_1.CardConfiguration,
    "CardInfo": cardInfo_1.CardInfo,
    "CardOrder": cardOrder_1.CardOrder,
    "CardOrderItem": cardOrderItem_1.CardOrderItem,
    "CardOrderItemDeliveryStatus": cardOrderItemDeliveryStatus_1.CardOrderItemDeliveryStatus,
    "Condition": condition_1.Condition,
    "ContactDetails": contactDetails_1.ContactDetails,
    "Counterparty": counterparty_1.Counterparty,
    "CounterpartyBankRestriction": counterpartyBankRestriction_1.CounterpartyBankRestriction,
    "CounterpartyTypesRestriction": counterpartyTypesRestriction_1.CounterpartyTypesRestriction,
    "CountriesRestriction": countriesRestriction_1.CountriesRestriction,
    "CreateSweepConfigurationV2": createSweepConfigurationV2_1.CreateSweepConfigurationV2,
    "DKLocalAccountIdentification": dKLocalAccountIdentification_1.DKLocalAccountIdentification,
    "DayOfWeekRestriction": dayOfWeekRestriction_1.DayOfWeekRestriction,
    "DefaultErrorResponseEntity": defaultErrorResponseEntity_1.DefaultErrorResponseEntity,
    "DelegatedAuthenticationData": delegatedAuthenticationData_1.DelegatedAuthenticationData,
    "DeliveryAddress": deliveryAddress_1.DeliveryAddress,
    "DeliveryContact": deliveryContact_1.DeliveryContact,
    "Device": device_1.Device,
    "DeviceInfo": deviceInfo_1.DeviceInfo,
    "DifferentCurrenciesRestriction": differentCurrenciesRestriction_1.DifferentCurrenciesRestriction,
    "Duration": duration_1.Duration,
    "EntryModesRestriction": entryModesRestriction_1.EntryModesRestriction,
    "Expiry": expiry_1.Expiry,
    "Fee": fee_1.Fee,
    "GetNetworkTokenResponse": getNetworkTokenResponse_1.GetNetworkTokenResponse,
    "GetTaxFormResponse": getTaxFormResponse_1.GetTaxFormResponse,
    "GrantLimit": grantLimit_1.GrantLimit,
    "GrantOffer": grantOffer_1.GrantOffer,
    "GrantOffers": grantOffers_1.GrantOffers,
    "HKLocalAccountIdentification": hKLocalAccountIdentification_1.HKLocalAccountIdentification,
    "HULocalAccountIdentification": hULocalAccountIdentification_1.HULocalAccountIdentification,
    "Href": href_1.Href,
    "IbanAccountIdentification": ibanAccountIdentification_1.IbanAccountIdentification,
    "IbanAccountIdentificationRequirement": ibanAccountIdentificationRequirement_1.IbanAccountIdentificationRequirement,
    "InternationalTransactionRestriction": internationalTransactionRestriction_1.InternationalTransactionRestriction,
    "InvalidField": invalidField_1.InvalidField,
    "Link": link_1.Link,
    "ListNetworkTokensResponse": listNetworkTokensResponse_1.ListNetworkTokensResponse,
    "MatchingTransactionsRestriction": matchingTransactionsRestriction_1.MatchingTransactionsRestriction,
    "MatchingValuesRestriction": matchingValuesRestriction_1.MatchingValuesRestriction,
    "MccsRestriction": mccsRestriction_1.MccsRestriction,
    "MerchantAcquirerPair": merchantAcquirerPair_1.MerchantAcquirerPair,
    "MerchantNamesRestriction": merchantNamesRestriction_1.MerchantNamesRestriction,
    "MerchantsRestriction": merchantsRestriction_1.MerchantsRestriction,
    "NOLocalAccountIdentification": nOLocalAccountIdentification_1.NOLocalAccountIdentification,
    "NZLocalAccountIdentification": nZLocalAccountIdentification_1.NZLocalAccountIdentification,
    "Name": name_1.Name,
    "NetworkToken": networkToken_1.NetworkToken,
    "NetworkTokenActivationDataRequest": networkTokenActivationDataRequest_1.NetworkTokenActivationDataRequest,
    "NetworkTokenActivationDataResponse": networkTokenActivationDataResponse_1.NetworkTokenActivationDataResponse,
    "NetworkTokenRequestor": networkTokenRequestor_1.NetworkTokenRequestor,
    "NumberAndBicAccountIdentification": numberAndBicAccountIdentification_1.NumberAndBicAccountIdentification,
    "PLLocalAccountIdentification": pLLocalAccountIdentification_1.PLLocalAccountIdentification,
    "PaginatedAccountHoldersResponse": paginatedAccountHoldersResponse_1.PaginatedAccountHoldersResponse,
    "PaginatedBalanceAccountsResponse": paginatedBalanceAccountsResponse_1.PaginatedBalanceAccountsResponse,
    "PaginatedGetCardOrderItemResponse": paginatedGetCardOrderItemResponse_1.PaginatedGetCardOrderItemResponse,
    "PaginatedGetCardOrderResponse": paginatedGetCardOrderResponse_1.PaginatedGetCardOrderResponse,
    "PaginatedPaymentInstrumentsResponse": paginatedPaymentInstrumentsResponse_1.PaginatedPaymentInstrumentsResponse,
    "PaymentInstrument": paymentInstrument_1.PaymentInstrument,
    "PaymentInstrumentAdditionalBankAccountIdentificationsInner": paymentInstrumentAdditionalBankAccountIdentificationsInner_1.PaymentInstrumentAdditionalBankAccountIdentificationsInnerClass,
    "PaymentInstrumentGroup": paymentInstrumentGroup_1.PaymentInstrumentGroup,
    "PaymentInstrumentGroupInfo": paymentInstrumentGroupInfo_1.PaymentInstrumentGroupInfo,
    "PaymentInstrumentInfo": paymentInstrumentInfo_1.PaymentInstrumentInfo,
    "PaymentInstrumentRequirement": paymentInstrumentRequirement_1.PaymentInstrumentRequirement,
    "PaymentInstrumentRevealInfo": paymentInstrumentRevealInfo_1.PaymentInstrumentRevealInfo,
    "PaymentInstrumentRevealRequest": paymentInstrumentRevealRequest_1.PaymentInstrumentRevealRequest,
    "PaymentInstrumentRevealResponse": paymentInstrumentRevealResponse_1.PaymentInstrumentRevealResponse,
    "PaymentInstrumentUpdateRequest": paymentInstrumentUpdateRequest_1.PaymentInstrumentUpdateRequest,
    "Phone": phone_1.Phone,
    "PhoneNumber": phoneNumber_1.PhoneNumber,
    "PinChangeRequest": pinChangeRequest_1.PinChangeRequest,
    "PinChangeResponse": pinChangeResponse_1.PinChangeResponse,
    "PlatformPaymentConfiguration": platformPaymentConfiguration_1.PlatformPaymentConfiguration,
    "ProcessingTypesRestriction": processingTypesRestriction_1.ProcessingTypesRestriction,
    "PublicKeyResponse": publicKeyResponse_1.PublicKeyResponse,
    "RegisterSCAFinalResponse": registerSCAFinalResponse_1.RegisterSCAFinalResponse,
    "RegisterSCARequest": registerSCARequest_1.RegisterSCARequest,
    "RegisterSCAResponse": registerSCAResponse_1.RegisterSCAResponse,
    "RemediatingAction": remediatingAction_1.RemediatingAction,
    "Repayment": repayment_1.Repayment,
    "RepaymentTerm": repaymentTerm_1.RepaymentTerm,
    "RestServiceError": restServiceError_1.RestServiceError,
    "RevealPinRequest": revealPinRequest_1.RevealPinRequest,
    "RevealPinResponse": revealPinResponse_1.RevealPinResponse,
    "RiskScores": riskScores_1.RiskScores,
    "RiskScoresRestriction": riskScoresRestriction_1.RiskScoresRestriction,
    "SELocalAccountIdentification": sELocalAccountIdentification_1.SELocalAccountIdentification,
    "SGLocalAccountIdentification": sGLocalAccountIdentification_1.SGLocalAccountIdentification,
    "SameAmountRestriction": sameAmountRestriction_1.SameAmountRestriction,
    "SameCounterpartyRestriction": sameCounterpartyRestriction_1.SameCounterpartyRestriction,
    "SearchRegisteredDevicesResponse": searchRegisteredDevicesResponse_1.SearchRegisteredDevicesResponse,
    "SourceAccountTypesRestriction": sourceAccountTypesRestriction_1.SourceAccountTypesRestriction,
    "StringMatch": stringMatch_1.StringMatch,
    "SweepConfigurationV2": sweepConfigurationV2_1.SweepConfigurationV2,
    "SweepCounterparty": sweepCounterparty_1.SweepCounterparty,
    "SweepSchedule": sweepSchedule_1.SweepSchedule,
    "Target": target_1.Target,
    "TargetUpdate": targetUpdate_1.TargetUpdate,
    "ThresholdRepayment": thresholdRepayment_1.ThresholdRepayment,
    "TimeOfDay": timeOfDay_1.TimeOfDay,
    "TimeOfDayRestriction": timeOfDayRestriction_1.TimeOfDayRestriction,
    "TokenRequestorsRestriction": tokenRequestorsRestriction_1.TokenRequestorsRestriction,
    "TotalAmountRestriction": totalAmountRestriction_1.TotalAmountRestriction,
    "TransactionRule": transactionRule_1.TransactionRule,
    "TransactionRuleEntityKey": transactionRuleEntityKey_1.TransactionRuleEntityKey,
    "TransactionRuleInfo": transactionRuleInfo_1.TransactionRuleInfo,
    "TransactionRuleInterval": transactionRuleInterval_1.TransactionRuleInterval,
    "TransactionRuleResponse": transactionRuleResponse_1.TransactionRuleResponse,
    "TransactionRuleRestrictions": transactionRuleRestrictions_1.TransactionRuleRestrictions,
    "TransactionRulesResponse": transactionRulesResponse_1.TransactionRulesResponse,
    "TransferRoute": transferRoute_1.TransferRoute,
    "TransferRouteRequest": transferRouteRequest_1.TransferRouteRequest,
    "TransferRouteRequirementsInner": transferRouteRequirementsInner_1.TransferRouteRequirementsInnerClass,
    "TransferRouteResponse": transferRouteResponse_1.TransferRouteResponse,
    "UKLocalAccountIdentification": uKLocalAccountIdentification_1.UKLocalAccountIdentification,
    "USInstantPayoutAddressRequirement": uSInstantPayoutAddressRequirement_1.USInstantPayoutAddressRequirement,
    "USInternationalAchAddressRequirement": uSInternationalAchAddressRequirement_1.USInternationalAchAddressRequirement,
    "USInternationalAchPriorityRequirement": uSInternationalAchPriorityRequirement_1.USInternationalAchPriorityRequirement,
    "USLocalAccountIdentification": uSLocalAccountIdentification_1.USLocalAccountIdentification,
    "UpdateNetworkTokenRequest": updateNetworkTokenRequest_1.UpdateNetworkTokenRequest,
    "UpdatePaymentInstrument": updatePaymentInstrument_1.UpdatePaymentInstrument,
    "UpdateSweepConfigurationV2": updateSweepConfigurationV2_1.UpdateSweepConfigurationV2,
    "VerificationDeadline": verificationDeadline_1.VerificationDeadline,
    "VerificationError": verificationError_1.VerificationError,
    "VerificationErrorRecursive": verificationErrorRecursive_1.VerificationErrorRecursive,
    "WalletProviderAccountScoreRestriction": walletProviderAccountScoreRestriction_1.WalletProviderAccountScoreRestriction,
    "WalletProviderDeviceScore": walletProviderDeviceScore_1.WalletProviderDeviceScore,
    "WalletProviderDeviceType": walletProviderDeviceType_1.WalletProviderDeviceType,
    "WebhookSetting": webhookSetting_1.WebhookSetting,
    "WebhookSettings": webhookSettings_1.WebhookSettings,
};
/**
 * Every mime-type consists of a type, subtype, and optional parameters.
 * The subtype can be composite, including information about the content format.
 * For example: `application/json-patch+json`, `application/merge-patch+json`.
 *
 * This helper transforms a string mime-type into an internal representation.
 * This simplifies the implementation of predicates that in turn define common rules for parsing or stringifying
 * the payload.
 */
const parseMimeType = (mimeType) => {
    const [type = '', subtype = ''] = mimeType.split('/');
    return {
        type,
        subtype,
        subtypeTokens: subtype.split('+'),
    };
};
// This factory creates a predicate function that checks a string mime-type against defined rules.
const mimeTypePredicateFactory = (predicate) => (mimeType) => predicate(parseMimeType(mimeType));
// Use this factory when you need to define a simple predicate based only on type and, if applicable, subtype.
const mimeTypeSimplePredicateFactory = (type, subtype) => mimeTypePredicateFactory((descriptor) => {
    if (descriptor.type !== type)
        return false;
    if (subtype != null && descriptor.subtype !== subtype)
        return false;
    return true;
});
// Creating a set of named predicates that will help us determine how to handle different mime-types
const isTextLikeMimeType = mimeTypeSimplePredicateFactory('text');
const isJsonMimeType = mimeTypeSimplePredicateFactory('application', 'json');
const isJsonLikeMimeType = mimeTypePredicateFactory((descriptor) => descriptor.type === 'application' && descriptor.subtypeTokens.some((item) => item === 'json'));
const isOctetStreamMimeType = mimeTypeSimplePredicateFactory('application', 'octet-stream');
const isFormUrlencodedMimeType = mimeTypeSimplePredicateFactory('application', 'x-www-form-urlencoded');
// Defining a list of mime-types in the order of prioritization for handling.
const supportedMimeTypePredicatesWithPriority = [
    isJsonMimeType,
    isJsonLikeMimeType,
    isTextLikeMimeType,
    isOctetStreamMimeType,
    isFormUrlencodedMimeType,
];
const nullableSuffix = " | null";
const optionalSuffix = " | undefined";
const arrayPrefix = "Array<";
const arraySuffix = ">";
const mapPrefix = "{ [key: string]: ";
const mapSuffix = "; }";
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap.has(expectedType)) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    let mapping = typeMap[expectedType].mapping;
                    if (mapping != undefined && mapping[discriminatorType]) {
                        return mapping[discriminatorType]; // use the type given in the discriminator
                    }
                    else if (typeMap[discriminatorType]) {
                        return discriminatorType;
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    /**
     * Serializes a value into a plain JSON-compatible object based on its type.
     *
     * Supports primitives, arrays, maps, dates, enums, and classes defined in `typeMap`.
     * Falls back to raw data if type is unknown or lacks `getAttributeTypeMap()`.
     *
     * @param data - The value to serialize.
     * @param type - The expected type name as a string.
     * @param format - Format hint (e.g. "date" or "date-time"). Default is an empty string.
     * @returns A JSON-compatible representation of `data`.
     */
    static serialize(data, type, format = "") {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.endsWith(nullableSuffix)) {
            let subType = type.slice(0, -nullableSuffix.length); // Type | null => Type
            return ObjectSerializer.serialize(data, subType, format);
        }
        else if (type.endsWith(optionalSuffix)) {
            let subType = type.slice(0, -optionalSuffix.length); // Type | undefined => Type
            return ObjectSerializer.serialize(data, subType, format);
        }
        else if (type.startsWith(arrayPrefix)) {
            let subType = type.slice(arrayPrefix.length, -arraySuffix.length); // Array<Type> => Type
            let transformedData = [];
            for (let date of data) {
                transformedData.push(ObjectSerializer.serialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(mapPrefix)) {
            let subType = type.slice(mapPrefix.length, -mapSuffix.length); // { [key: string]: Type; } => Type
            let transformedData = {};
            for (let key in data) {
                transformedData[key] = ObjectSerializer.serialize(data[key], subType, format);
            }
            return transformedData;
        }
        else if (type === "Date") {
            if (format == "date") {
                let month = data.getMonth() + 1;
                month = month < 10 ? "0" + month.toString() : month.toString();
                let day = data.getDate();
                day = day < 10 ? "0" + day.toString() : day.toString();
                return data.getFullYear() + "-" + month + "-" + day;
            }
            else {
                return data.toISOString();
            }
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            const clazz = typeMap[type];
            // Safe check for getAttributeTypeMap
            if (typeof clazz.getAttributeTypeMap !== "function") {
                return { ...data }; // fallback: shallow copy
            }
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let attributeType of attributeTypes) {
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);
            }
            return instance;
        }
    }
    /**
     * Deserializes a plain JSON-compatible object into a typed instance.
     *
     * Handles primitives, arrays, maps, dates, enums, and known classes from `typeMap`.
     * Uses discriminators when available to resolve polymorphic types.
     * Falls back to raw data if the type is unknown or lacks `getAttributeTypeMap()`.
     *
     * @param data - The raw input to deserialize.
     * @param type - The expected type name as a string.
     * @param format - Format hint (e.g. "date" or "date-time"). Default is an empty string.
     * @returns A deserialized instance or value of `data`.
     */
    static deserialize(data, type, format = "") {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.endsWith(nullableSuffix)) {
            let subType = type.slice(0, -nullableSuffix.length); // Type | null => Type
            return ObjectSerializer.deserialize(data, subType, format);
        }
        else if (type.endsWith(optionalSuffix)) {
            let subType = type.slice(0, -optionalSuffix.length); // Type | undefined => Type
            return ObjectSerializer.deserialize(data, subType, format);
        }
        else if (type.startsWith(arrayPrefix)) {
            let subType = type.slice(arrayPrefix.length, -arraySuffix.length); // Array<Type> => Type
            let transformedData = [];
            for (let date of data) {
                transformedData.push(ObjectSerializer.deserialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(mapPrefix)) {
            let subType = type.slice(mapPrefix.length, -mapSuffix.length); // { [key: string]: Type; } => Type
            let transformedData = {};
            for (let key in data) {
                transformedData[key] = ObjectSerializer.deserialize(data[key], subType, format);
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap.has(type)) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            // Safe check for getAttributeTypeMap
            if (typeof typeMap[type].getAttributeTypeMap !== "function") {
                Object.assign(instance, data); // fallback: shallow copy
                return instance;
            }
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let attributeType of attributeTypes) {
                let value = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
                if (value !== undefined) {
                    instance[attributeType.name] = value;
                }
            }
            return instance;
        }
    }
    /**
     * Normalize media type
     *
     * We currently do not handle any media types attributes, i.e. anything
     * after a semicolon. All content is assumed to be UTF-8 compatible.
     */
    static normalizeMediaType(mediaType) {
        var _a;
        if (mediaType === undefined) {
            return undefined;
        }
        return ((_a = mediaType.split(";")[0]) !== null && _a !== void 0 ? _a : '').trim().toLowerCase();
    }
    /**
     * From a list of possible media types, choose the one we can handle best.
     *
     * The order of the given media types does not have any impact on the choice
     * made.
     */
    static getPreferredMediaType(mediaTypes) {
        /** According to OAS 3 we should default to json */
        if (mediaTypes.length === 0) {
            return "application/json";
        }
        const normalMediaTypes = mediaTypes.map(ObjectSerializer.normalizeMediaType);
        for (const predicate of supportedMimeTypePredicatesWithPriority) {
            for (const mediaType of normalMediaTypes) {
                if (mediaType != null && predicate(mediaType)) {
                    return mediaType;
                }
            }
        }
        throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
    }
    /**
     * Convert data to a string according the given media type
     */
    static stringify(data, mediaType) {
        if (isTextLikeMimeType(mediaType)) {
            return String(data);
        }
        if (isJsonLikeMimeType(mediaType)) {
            return JSON.stringify(data);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
    }
    /**
     * Parse data from a string according to the given media type
     */
    static parse(rawData, mediaType) {
        if (mediaType === undefined) {
            throw new Error("Cannot parse content. No Content-Type defined.");
        }
        if (isTextLikeMimeType(mediaType)) {
            return rawData;
        }
        if (isJsonLikeMimeType(mediaType)) {
            return JSON.parse(rawData);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.parse.");
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=objectSerializer.js.map