"use strict";
/*
 * The version of the OpenAPI document: v4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferEvent = void 0;
class TransferEvent {
    static getAttributeTypeMap() {
        return TransferEvent.attributeTypeMap;
    }
    constructor() {
    }
}
exports.TransferEvent = TransferEvent;
TransferEvent.discriminator = undefined;
TransferEvent.mapping = undefined;
TransferEvent.attributeTypeMap = [
    {
        "name": "amount",
        "baseName": "amount",
        "type": "Amount | null",
        "format": ""
    },
    {
        "name": "amountAdjustments",
        "baseName": "amountAdjustments",
        "type": "Array<AmountAdjustment>",
        "format": ""
    },
    {
        "name": "arn",
        "baseName": "arn",
        "type": "string",
        "format": ""
    },
    {
        "name": "bookingDate",
        "baseName": "bookingDate",
        "type": "Date",
        "format": "date-time"
    },
    {
        "name": "estimatedArrivalTime",
        "baseName": "estimatedArrivalTime",
        "type": "Date",
        "format": "date-time"
    },
    {
        "name": "eventsData",
        "baseName": "eventsData",
        "type": "Array<TransferEventEventsDataInner>",
        "format": ""
    },
    {
        "name": "externalReason",
        "baseName": "externalReason",
        "type": "ExternalReason | null",
        "format": ""
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string",
        "format": ""
    },
    {
        "name": "modification",
        "baseName": "modification",
        "type": "Modification | null",
        "format": ""
    },
    {
        "name": "mutations",
        "baseName": "mutations",
        "type": "Array<BalanceMutation>",
        "format": ""
    },
    {
        "name": "originalAmount",
        "baseName": "originalAmount",
        "type": "Amount | null",
        "format": ""
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "TransferEvent.ReasonEnum",
        "format": ""
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "TransferEvent.StatusEnum",
        "format": ""
    },
    {
        "name": "trackingData",
        "baseName": "trackingData",
        "type": "TransferEventTrackingData | null",
        "format": ""
    },
    {
        "name": "transactionId",
        "baseName": "transactionId",
        "type": "string",
        "format": ""
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "TransferEvent.TypeEnum",
        "format": ""
    },
    {
        "name": "updateDate",
        "baseName": "updateDate",
        "type": "Date",
        "format": "date-time"
    },
    {
        "name": "valueDate",
        "baseName": "valueDate",
        "type": "Date",
        "format": "date-time"
    }
];
(function (TransferEvent) {
    let ReasonEnum;
    (function (ReasonEnum) {
        ReasonEnum["AccountHierarchyNotActive"] = "accountHierarchyNotActive";
        ReasonEnum["AmountLimitExceeded"] = "amountLimitExceeded";
        ReasonEnum["ApprovalExpired"] = "approvalExpired";
        ReasonEnum["Approved"] = "approved";
        ReasonEnum["BalanceAccountTemporarilyBlockedByTransactionRule"] = "balanceAccountTemporarilyBlockedByTransactionRule";
        ReasonEnum["CounterpartyAccountBlocked"] = "counterpartyAccountBlocked";
        ReasonEnum["CounterpartyAccountClosed"] = "counterpartyAccountClosed";
        ReasonEnum["CounterpartyAccountNotFound"] = "counterpartyAccountNotFound";
        ReasonEnum["CounterpartyAddressRequired"] = "counterpartyAddressRequired";
        ReasonEnum["CounterpartyBankTimedOut"] = "counterpartyBankTimedOut";
        ReasonEnum["CounterpartyBankUnavailable"] = "counterpartyBankUnavailable";
        ReasonEnum["Declined"] = "declined";
        ReasonEnum["DeclinedByTransactionRule"] = "declinedByTransactionRule";
        ReasonEnum["DirectDebitNotSupported"] = "directDebitNotSupported";
        ReasonEnum["Error"] = "error";
        ReasonEnum["NotEnoughBalance"] = "notEnoughBalance";
        ReasonEnum["Pending"] = "pending";
        ReasonEnum["PendingApproval"] = "pendingApproval";
        ReasonEnum["PendingExecution"] = "pendingExecution";
        ReasonEnum["RefusedByCounterpartyBank"] = "refusedByCounterpartyBank";
        ReasonEnum["RefusedByCustomer"] = "refusedByCustomer";
        ReasonEnum["RouteNotFound"] = "routeNotFound";
        ReasonEnum["ScaFailed"] = "scaFailed";
        ReasonEnum["TransferInstrumentDoesNotExist"] = "transferInstrumentDoesNotExist";
        ReasonEnum["Unknown"] = "unknown";
    })(ReasonEnum = TransferEvent.ReasonEnum || (TransferEvent.ReasonEnum = {}));
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum["ApprovalPending"] = "approvalPending";
        StatusEnum["AtmWithdrawal"] = "atmWithdrawal";
        StatusEnum["AtmWithdrawalReversalPending"] = "atmWithdrawalReversalPending";
        StatusEnum["AtmWithdrawalReversed"] = "atmWithdrawalReversed";
        StatusEnum["AuthAdjustmentAuthorised"] = "authAdjustmentAuthorised";
        StatusEnum["AuthAdjustmentError"] = "authAdjustmentError";
        StatusEnum["AuthAdjustmentRefused"] = "authAdjustmentRefused";
        StatusEnum["Authorised"] = "authorised";
        StatusEnum["BankTransfer"] = "bankTransfer";
        StatusEnum["BankTransferPending"] = "bankTransferPending";
        StatusEnum["Booked"] = "booked";
        StatusEnum["BookingPending"] = "bookingPending";
        StatusEnum["Cancelled"] = "cancelled";
        StatusEnum["CapturePending"] = "capturePending";
        StatusEnum["CaptureReversalPending"] = "captureReversalPending";
        StatusEnum["CaptureReversed"] = "captureReversed";
        StatusEnum["Captured"] = "captured";
        StatusEnum["CapturedExternally"] = "capturedExternally";
        StatusEnum["Chargeback"] = "chargeback";
        StatusEnum["ChargebackExternally"] = "chargebackExternally";
        StatusEnum["ChargebackPending"] = "chargebackPending";
        StatusEnum["ChargebackReversalPending"] = "chargebackReversalPending";
        StatusEnum["ChargebackReversed"] = "chargebackReversed";
        StatusEnum["Credited"] = "credited";
        StatusEnum["DepositCorrection"] = "depositCorrection";
        StatusEnum["DepositCorrectionPending"] = "depositCorrectionPending";
        StatusEnum["Dispute"] = "dispute";
        StatusEnum["DisputeClosed"] = "disputeClosed";
        StatusEnum["DisputeExpired"] = "disputeExpired";
        StatusEnum["DisputeNeedsReview"] = "disputeNeedsReview";
        StatusEnum["Error"] = "error";
        StatusEnum["Expired"] = "expired";
        StatusEnum["Failed"] = "failed";
        StatusEnum["Fee"] = "fee";
        StatusEnum["FeePending"] = "feePending";
        StatusEnum["InternalTransfer"] = "internalTransfer";
        StatusEnum["InternalTransferPending"] = "internalTransferPending";
        StatusEnum["InvoiceDeduction"] = "invoiceDeduction";
        StatusEnum["InvoiceDeductionPending"] = "invoiceDeductionPending";
        StatusEnum["ManualCorrectionPending"] = "manualCorrectionPending";
        StatusEnum["ManuallyCorrected"] = "manuallyCorrected";
        StatusEnum["MatchedStatement"] = "matchedStatement";
        StatusEnum["MatchedStatementPending"] = "matchedStatementPending";
        StatusEnum["MerchantPayin"] = "merchantPayin";
        StatusEnum["MerchantPayinPending"] = "merchantPayinPending";
        StatusEnum["MerchantPayinReversed"] = "merchantPayinReversed";
        StatusEnum["MerchantPayinReversedPending"] = "merchantPayinReversedPending";
        StatusEnum["MiscCost"] = "miscCost";
        StatusEnum["MiscCostPending"] = "miscCostPending";
        StatusEnum["PaymentCost"] = "paymentCost";
        StatusEnum["PaymentCostPending"] = "paymentCostPending";
        StatusEnum["PendingApproval"] = "pendingApproval";
        StatusEnum["PendingExecution"] = "pendingExecution";
        StatusEnum["Received"] = "received";
        StatusEnum["RefundPending"] = "refundPending";
        StatusEnum["RefundReversalPending"] = "refundReversalPending";
        StatusEnum["RefundReversed"] = "refundReversed";
        StatusEnum["Refunded"] = "refunded";
        StatusEnum["RefundedExternally"] = "refundedExternally";
        StatusEnum["Refused"] = "refused";
        StatusEnum["Rejected"] = "rejected";
        StatusEnum["ReserveAdjustment"] = "reserveAdjustment";
        StatusEnum["ReserveAdjustmentPending"] = "reserveAdjustmentPending";
        StatusEnum["Returned"] = "returned";
        StatusEnum["SecondChargeback"] = "secondChargeback";
        StatusEnum["SecondChargebackPending"] = "secondChargebackPending";
        StatusEnum["Undefined"] = "undefined";
    })(StatusEnum = TransferEvent.StatusEnum || (TransferEvent.StatusEnum = {}));
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum["Accounting"] = "accounting";
        TypeEnum["Tracking"] = "tracking";
    })(TypeEnum = TransferEvent.TypeEnum || (TransferEvent.TypeEnum = {}));
})(TransferEvent = exports.TransferEvent || (exports.TransferEvent = {}));
//# sourceMappingURL=transferEvent.js.map