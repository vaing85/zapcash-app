import { RecurringTokenStoreOperation } from "./recurringTokenStoreOperation";
export declare class TokenizationUpdatedDetailsNotificationRequest {
    /**
    * The date and time when the event happened, in ISO 8601 extended format.
    */
    "createdAt": Date;
    "data": RecurringTokenStoreOperation;
    /**
    * The environment from which the webhook originated.  Possible values: **test**, **live**.
    */
    "environment": TokenizationUpdatedDetailsNotificationRequest.EnvironmentEnum;
    /**
    * The PSP reference of the event that triggered the webhook.
    */
    "eventId": string;
    /**
    * The type of webhook.
    */
    "type": TokenizationUpdatedDetailsNotificationRequest.TypeEnum;
    /**
    * The version of this entity.
    */
    "version"?: string;
    static readonly discriminator: string | undefined;
    static readonly mapping: {
        [index: string]: string;
    } | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
export declare namespace TokenizationUpdatedDetailsNotificationRequest {
    enum EnvironmentEnum {
        Test = "test",
        Live = "live"
    }
    enum TypeEnum {
        RecurringTokenUpdated = "recurring.token.updated"
    }
}
