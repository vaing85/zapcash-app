import { ThreeDSRequestData } from "./threeDSRequestData";
export declare class AuthenticationData {
    /**
    * Indicates when 3D Secure authentication should be attempted. This overrides all other rules, including [Dynamic 3D Secure settings](https://docs.adyen.com/risk-management/dynamic-3d-secure).  Possible values:  * **always**: Perform 3D Secure authentication. * **never**: Don\'t perform 3D Secure authentication. If PSD2 SCA or other national regulations require authentication, the transaction gets declined.
    */
    "attemptAuthentication"?: AuthenticationData.AttemptAuthenticationEnum;
    /**
    * Required to trigger the [authentication-only flow](https://docs.adyen.com/online-payments/3d-secure/authentication-only/). If set to **true**, you will only perform the 3D Secure 2 authentication, and will not proceed to the payment authorization. Default: **false**.
    */
    "authenticationOnly"?: boolean;
    "threeDSRequestData"?: ThreeDSRequestData | null;
    static readonly discriminator: string | undefined;
    static readonly mapping: {
        [index: string]: string;
    } | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
export declare namespace AuthenticationData {
    enum AttemptAuthenticationEnum {
        Always = "always",
        Never = "never"
    }
}
