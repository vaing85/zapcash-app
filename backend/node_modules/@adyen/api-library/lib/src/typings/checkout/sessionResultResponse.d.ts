import { Payment } from "./payment";
export declare class SessionResultResponse {
    /**
    * Contains additional information about the payment. Some fields are included only if you enable them. To enable these fields in your Customer Area, go to **Developers** > **Additional data**.
    */
    "additionalData"?: {
        [key: string]: string;
    };
    /**
    * A unique identifier of the session.
    */
    "id"?: string;
    /**
    * A list of all authorised payments done for this session.
    */
    "payments"?: Array<Payment>;
    /**
    * The unique reference that you provided in the original `/sessions` request. This identifies the payment and is used in all communication with you about the payment status.
    */
    "reference"?: string;
    /**
    * The status of the session. The status included in the response doesn\'t get updated. Don\'t make the request again to check for payment status updates.  Possible values: * **completed**: the shopper completed the payment, and the payment was authorized. * **paymentPending**: the shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow, like voucher payments where the shopper completes the payment in a physical shop. * **refused**: the session has been refused, because of too many refused payment attempts. The shopper can no longer complete the payment with this session. * **canceled**: the shopper canceled the payment. * **expired**: the session expired. The shopper can no longer complete the payment with this session. By default, the session expires one hour after it is created.
    */
    "status"?: SessionResultResponse.StatusEnum;
    static readonly discriminator: string | undefined;
    static readonly mapping: {
        [index: string]: string;
    } | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
export declare namespace SessionResultResponse {
    enum StatusEnum {
        Active = "active",
        Canceled = "canceled",
        Completed = "completed",
        Expired = "expired",
        PaymentPending = "paymentPending",
        Refused = "refused"
    }
}
