import { AuthenticationInfo } from "./authenticationInfo";
import { PurchaseInfo } from "./purchaseInfo";
export declare class AuthenticationNotificationData {
    "authentication": AuthenticationInfo;
    /**
    * The unique identifier of the balance platform.
    */
    "balancePlatform"?: string;
    /**
    * The unique identifier of the authentication.
    */
    "id": string;
    /**
    * The unique identifier of the payment instrument that was used for the authentication.
    */
    "paymentInstrumentId": string;
    "purchase": PurchaseInfo;
    /**
    * Outcome of the authentication. Allowed values: * authenticated * rejected * error
    */
    "status": AuthenticationNotificationData.StatusEnum;
    static readonly discriminator: string | undefined;
    static readonly mapping: {
        [index: string]: string;
    } | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
export declare namespace AuthenticationNotificationData {
    enum StatusEnum {
        Authenticated = "authenticated",
        Rejected = "rejected",
        Error = "error"
    }
}
