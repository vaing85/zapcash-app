import { Amount } from "./amount";
export declare class CapabilitySettings {
    /**
    * The maximum amount a card holder can spend per industry.
    */
    "amountPerIndustry"?: {
        [key: string]: Amount;
    };
    /**
    * The number of card holders who can use the card.
    */
    "authorizedCardUsers"?: boolean;
    /**
    * The funding source of the card, for example **debit**.
    */
    "fundingSource"?: Array<CapabilitySettings.FundingSourceEnum>;
    /**
    * The period when the rule conditions apply.
    */
    "interval"?: CapabilitySettings.IntervalEnum;
    "maxAmount"?: Amount | null;
    static readonly discriminator: string | undefined;
    static readonly mapping: {
        [index: string]: string;
    } | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
export declare namespace CapabilitySettings {
    enum FundingSourceEnum {
        Credit = "credit",
        Debit = "debit",
        Prepaid = "prepaid"
    }
    enum IntervalEnum {
        Daily = "daily",
        Monthly = "monthly",
        Weekly = "weekly"
    }
}
